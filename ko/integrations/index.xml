<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>apptest.ai – CI/CD Integration Document</title><link>/ko/integrations/</link><description>Recent content in CI/CD Integration Document on apptest.ai</description><generator>Hugo -- gohugo.io</generator><atom:link href="/ko/integrations/index.xml" rel="self" type="application/rss+xml"/><item><title>Integrations: 1. Jenkins</title><link>/ko/integrations/1_jenkins/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>/ko/integrations/1_jenkins/</guid><description>
&lt;h2 id="jenkins-사용자를-위한-apptestai-통합-가이드">Jenkins 사용자를 위한 apptest.ai 통합 가이드&lt;/h2>
&lt;h5 id="jenkins-파이프라인으로-android-및-ios-앱-테스트-자동화하기">Jenkins 파이프라인으로 Android 및 iOS 앱 테스트 자동화하기&lt;/h5>
&lt;p>이 문서는 Jenkins를 구성하고 API를 사용하여 빌드 단계에서 apptest.ai 테스트를 자동으로 실행할 수 있도록 통합시키는 방법을 설명합니다.&lt;/p>
&lt;p>Jenkins 설치에 대해서는 &lt;a href="https://jenkins.io/doc/pipeline/tour/getting-started/">Jenkins Setup Guide&lt;/a> 링크를 참조하시기 바랍니다.&lt;/p>
&lt;h3 id="1-apptestai--integration-api">1. Apptest.ai – Integration API&lt;/h3>
&lt;p>&lt;span style="background-color: #5cb85c;padding: 5px 10px;border-radius: 5px;color: #fff;margin-right: 10px;"> POST &lt;/span>
&lt;span style="background-color: #f9f2f4;color: #c7254e;padding: 5px 10px;border-radius: 5px;">&lt;a href="https://api.apptest.ai/tests_set/queuing?access_key=%7BACCESS_KEY%7D">https://api.apptest.ai/tests_set/queuing?access_key={ACCESS_KEY}&lt;/a>&lt;/span>&lt;/p>
&lt;p>JSON Data parameters&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">Name&lt;/th>
&lt;th align="left">Type&lt;/th>
&lt;th align="left">Required / Optional&lt;/th>
&lt;th align="left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">callback&lt;/td>
&lt;td align="left">String&lt;/td>
&lt;td align="left">Optional&lt;/td>
&lt;td align="left">테스트가 완료되면 호출될 Callback URL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">pid&lt;/td>
&lt;td align="left">Integer&lt;/td>
&lt;td align="left">Required&lt;/td>
&lt;td align="left">apptest.ai에서 생성한 프로젝트의 고유번호&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">test_set_name&lt;/td>
&lt;td align="left">String&lt;/td>
&lt;td align="left">Required&lt;/td>
&lt;td align="left">apptest.ai의 프로젝트에 생성될 테스트 세트의 이름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">login_id&lt;/td>
&lt;td align="left">String&lt;/td>
&lt;td align="left">Optional&lt;/td>
&lt;td align="left">Testbot이 로그인 화면을 만났을때 입력할 앱의 로그인 아이디&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">login_pw&lt;/td>
&lt;td align="left">String&lt;/td>
&lt;td align="left">Optional&lt;/td>
&lt;td align="left">Testbot이 로그인 화면을 만났을때 입력할 앱의 로그인 비밀번호&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">use_vo&lt;/td>
&lt;td align="left">Integer (0 or 1)&lt;/td>
&lt;td align="left">Optional&lt;/td>
&lt;td align="left">AT&amp;amp;T사의 Video Optimizer (ARO)를 활성화 / 비활성화하는 옵션&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>File Parameters&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">Name&lt;/th>
&lt;th align="left">Type&lt;/th>
&lt;th align="left">Required / Optional&lt;/th>
&lt;th align="left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">apk_file&lt;/td>
&lt;td align="left">File&lt;/td>
&lt;td align="left">Required&lt;/td>
&lt;td align="left">테스트 대상이 될 앱파일&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Example Response&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;data&amp;quot;: {
&amp;quot;test_count&amp;quot;: 1, // Test Count (Integer),
&amp;quot;tsid&amp;quot;: 192948 // Test Set ID (Integer)
},
&amp;quot;errorCode&amp;quot;: 0,
&amp;quot;reason&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;result&amp;quot;: &amp;quot;ok&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>Callback result data format&lt;/p>
&lt;p>Callback URL을 통해 리턴되는 JUnit XML 형식의 테스트 결과&lt;/p>
&lt;pre>&lt;code>&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;testsuites name=&amp;quot;TestBot Test&amp;quot;&amp;gt;
&amp;lt;testsuite name=&amp;quot;TestBot Test.Apk File Name (with Version)&amp;quot;&amp;gt;
&amp;lt;testcase name=&amp;quot;Device Name 1&amp;quot; time=&amp;quot;Test Duration (sec)&amp;quot;&amp;gt;
&amp;lt;/testcase&amp;gt;
&amp;lt;testcase name=&amp;quot;Device Name 2&amp;quot; time=&amp;quot;Test Duration (sec)&amp;quot;&amp;gt;
&amp;lt;error message=&amp;quot;apptest.ai Result Page Link&amp;quot;&amp;gt;&amp;lt;/error&amp;gt;
&amp;lt;/testcase&amp;gt;
...
&amp;lt;/testsuite&amp;gt;
&amp;lt;/testsuites&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;span style="background-color: #5cb85c;padding: 5px 10px;border-radius: 5px;color: #fff;margin-right: 10px;"> GET &lt;/span>
&lt;span style="background-color: #f9f2f4;color: #c7254e;padding: 5px 10px;border-radius: 5px;">&lt;a href="https://api.apptest.ai/tests_set/%7Btsid%7D/ci_info?access_key=ACCESS_KEY">https://api.apptest.ai/tests_set/{tsid}/ci_info?access_key=ACCESS_KEY&lt;/a>&lt;/span>&lt;/p>
&lt;pre>&lt;code>Response
{
&amp;quot;complete&amp;quot;: true,
&amp;quot;data&amp;quot;: {
&amp;quot;result_xml&amp;quot;: &amp;quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;testsuites name=&amp;quot;TestBot Test&amp;quot;&amp;gt; &amp;lt;testsuite name=&amp;quot;TestBot Test.Apk File Name (with Version)&amp;quot;&amp;gt; &amp;lt;testcase name=&amp;quot;Device Name 1&amp;quot; time=&amp;quot;Test Duration (sec)&amp;quot;&amp;gt; &amp;lt;/testcase&amp;gt; &amp;lt;testcase name=&amp;quot;Device Name 2&amp;quot; time=&amp;quot;Test Duration (sec)&amp;quot;&amp;gt; &amp;lt;error message=&amp;quot;Apptes.ai Result Page Link&amp;quot;&amp;gt;&amp;lt;/error&amp;gt; &amp;lt;/testcase&amp;gt; ... &amp;lt;/testsuite&amp;gt; &amp;lt;/testsuites&amp;gt;&amp;quot;
},
&amp;quot;errorCode&amp;quot;: 0,
&amp;quot;reason&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;result&amp;quot;: &amp;quot;ok&amp;quot;
}
&lt;/code>&lt;/pre>&lt;h3 id="2-apptestai--access-key-and-project-id">2. apptest.ai – Access Key and Project ID&lt;/h3>
&lt;p>apptest.ai를 Jenkins 파이프 라인에 통합하려면 액세스 키와 프로젝트의 고유번호(Project ID)가 필요합니다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>액세스 키를 찾는 방법 : apptest.ai에 가입하면 액세스 키가 자동으로 발급됩니다. apptest.ai Profile 페이지에서 확인하실 수 있습니다.
&lt;figure>
&lt;img src="/images/1_jenkins_1.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_2.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>프로젝트 ID를 찾는 방법 : 테스트 프로젝트를 만들 때 프로젝트 ID가 할당됩니다.
&lt;figure>
&lt;img src="/images/1_jenkins_3.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_4.png"/>
&lt;/figure>
&lt;/p>
&lt;p>회원가입시 기본적으로 샘플 테스트 프로젝트가 1개 생성됩니다.&lt;/p>
&lt;p>샘플 테스트 프로젝트의 설정 변경은 지원되지 않습니다. 그러나 새로 생성한 프로젝트는 설정을 변경할 수 있습니다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-jenkins--webhook-step-plugin-installation">3. Jenkins – Webhook Step Plugin Installation&lt;/h3>
&lt;p>Jenkins 대시 보드에서 &amp;ldquo;Webhook step&amp;rdquo; 플러그인을 검색하여 설치하십시오. [Jenkins 관리]-&amp;gt; [플러그인 관리]-&amp;gt; [사용 가능]&lt;/p>
&lt;p>다음 단계에서 webhook 대신 폴링을 사용하는 apptest.ai Test Stage Code2 소스 코드를 사용하는 경우이 단계를 건너 뛰십시오.&lt;/p>
&lt;h3 id="4-jenkins--pipeline-configuration">4. Jenkins – Pipeline configuration&lt;/h3>
&lt;p>이 섹션에서는 apptest.ai Test 스테이지를 Jenkins 파이프 라인 항목에 연결하는 방법을 보여줍니다. Jenkins 파이프 라인 항목이 이미 작성되어 있어야합니다.&lt;/p>
&lt;p>자세한 내용은 예제 링크를 참조하십시오.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>메인 페이지에서 좌측메뉴의 Configure 버튼을 클릭하십시오.
&lt;figure>
&lt;img src="/images/1_jenkins_5.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_6.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>파이프 라인 설정 페이지에서 apptest.ai Tes Stage Code를 스크립트 입력란에 추가하십시오.
&lt;figure>
&lt;img src="/images/1_jenkins_7.png"/>
&lt;/figure>
&lt;/p>
&lt;h5 id="apptestai-test-stage-code-1--webhook">[apptest.ai Test Stage Code 1] – Webhook&lt;/h5>
&lt;pre>&lt;code>import groovy.json.JsonSlurper
node {
def gitRepository
def androidHome
def apkFile
def accessKey
def serviceProjectId
def asyncResult
def serviceUrl
def serviceHost
def serviceCompleteCheckUrl
// Add to your Preparation Stage
stage('Preparation') {
// Git Repository URL Address
gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git'
// Android Home Path
androidHome = '/opt/apps/android-sdk'
echo &amp;quot;Current workspace : ${workspace}&amp;quot;
accessKey = 'e40c4487b3cf5e6d53ef0543d2614488'
serviceProjectId = 376
serviceHost = &amp;quot;https://api.apptest.ai&amp;quot;
serviceUrl = &amp;quot;${serviceHost}/test_set/queuing?access_key=${accessKey}&amp;quot;
}
// Git Source Clone Stage
stage('Clone source') {
git branch: 'master', url: gitRepository
}
// Android SDK directory path Setting
stage('SDK Configure') {
sh &amp;quot;echo 'sdk.dir=${androidHome}' &amp;gt; local.properties&amp;quot;
}
// Gradle AssembleDebug Build Stage
stage('Gradle Debug build') {
sh &amp;quot;./gradlew :app:assembleDebug&amp;quot;
}
// apptest.ai Test Stage
stage('Apptestai Test') {
apkFile=&amp;quot;path/to/file/your_app.apk&amp;quot;
hook = registerWebhook()
// Call apptest.ai's Test API.
// Refer to 1. API Spec
r = sh(returnStdout: true, script: &amp;quot;curl -X POST -F 'apk_file=@\&amp;quot;${apkFile}\&amp;quot;' -F 'data={\&amp;quot;pid\&amp;quot;: ${serviceProjectId}, \&amp;quot;test_set_name\&amp;quot;: \&amp;quot;${env.BUILD_TAG}\&amp;quot;, \&amp;quot;callback\&amp;quot;: \&amp;quot;${hook.getURL()}\&amp;quot;}' ${serviceUrl}&amp;quot;).toString().trim()
j = new JsonSlurper().parseText(r)
echo &amp;quot;jsonParse Result: ${j}&amp;quot;
if (j.errorCode != 0) {
echo &amp;quot;apptest.ai Test cannot started. ${r}&amp;quot;
r = null
j = null
error &amp;quot;FAIL&amp;quot;
}
tsid=j['data']['tsid']
echo &amp;quot;apptest.ai TestSet id : ${tsid}&amp;quot;
echo &amp;quot;Waiting for POST to ${hook.getURL()}&amp;quot;
// Wait for Test Complete signal
waitForWebhook hook
// Get the Test Result Data
// Refer to 1. API Spec
serviceCompleteCheckUrl = &amp;quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}&amp;quot;
r = sh( returnStdout: true, script: &amp;quot;curl -X GET ${serviceCompleteCheckUrl}&amp;quot;).toString().trim()
j = new JsonSlurper().parseText(r)
asyncResult = j.data.result_xml
echo &amp;quot;Webhook called with data: ${asyncResult}&amp;quot;
}
stage('Write Apptestai Test Result') {
sh &amp;quot;mkdir -p tmp/&amp;quot;
// Write File file:&amp;quot;tmp/TESTS-Apptestai.xml&amp;quot;, text: asyncResult, encoding: &amp;quot;UTF-8&amp;quot;
sh &amp;quot;echo -n '${asyncResult}' &amp;gt; tmp/TESTS-Apptestai.xml&amp;quot;
}
stage('jUnit Test') {
junit 'tmp/TESTS-*.xml'
}
}
&lt;/code>&lt;/pre>&lt;h5 id="apptestai-test-stage-code-2--polling">[apptest.ai Test Stage Code 2] – Polling&lt;/h5>
&lt;pre>&lt;code>import groovy.json.JsonSlurper
node {
def gitRepository
def androidHome
def apkFile
def accessKey
def serviceProjectId
def testResult
def serviceUrl
def serviceHost
def serviceCompleteCheckUrl
// Add to your Preparation Stage
stage('Preparation') {
// Git Repository URL Address
gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git'
// Android Home Path
androidHome = '/opt/apps/android-sdk'
echo &amp;quot;Current workspace : ${workspace}&amp;quot;
accessKey = 'e40c4487b3cf5e6d53ef0543d2614488'
serviceProjectId = 376
serviceHost = &amp;quot;https://api.apptest.ai&amp;quot;
serviceUrl = &amp;quot;${serviceHost}/test_set/queuing?access_key=${accessKey}&amp;quot;
}
// Git Source Clone Stage
stage('Clone source') {
git branch: 'master', url: gitRepository
}
// Android SDK directory path Setting
stage('SDK Configure') {
sh &amp;quot;echo 'sdk.dir=${androidHome}' &amp;gt; local.properties&amp;quot;
}
// Gradle AssembleDebug Build Stage
stage('Gradle Debug build') {
sh &amp;quot;./gradlew :app:assembleDebug&amp;quot;
}
// Apptest.ai Test Stage
stage('apptestai Test') {
apkFile=&amp;quot;path/to/file/your_app.apk&amp;quot;
// Call apptest.ai\'s Test API.
r = sh(returnStdout: true, script: &amp;quot;curl -X POST -F 'apk_file=@\&amp;quot;${apkFile}\&amp;quot;' -F 'data={\&amp;quot;pid\&amp;quot;: ${serviceProjectId}, \&amp;quot;test_set_name\&amp;quot;: \&amp;quot;${env.BUILD_TAG}\&amp;quot;}' ${serviceUrl}&amp;quot;).toString().trim()
j = new JsonSlurper().parseText(r)
echo &amp;quot;jsonParse Result: ${j}&amp;quot;
if (j.errorCode != 0) {
echo &amp;quot;apptest.ai Test cannot started. ${r}&amp;quot;
r = null
j = null
error &amp;quot;FAIL&amp;quot;
}
tsid=j['data']['tsid']
echo &amp;quot;Apptest.ai TestSet id : ${tsid}&amp;quot;
// Get the Test Result Data
// Refer to 1. API Spec
serviceCompleteCheckUrl=&amp;quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}&amp;quot;
r = null
j = null
waitUntil {
sleep (time: 10, unit: &amp;quot;SECONDS&amp;quot;)
r = sh( returnStdout: true, script: &amp;quot;curl -X GET ${serviceCompleteCheckUrl}&amp;quot;).toString().trim()
j = new JsonSlurper().parseText(r)
complete=j.complete
echo &amp;quot;ci_info result : ${complete}&amp;quot;
if (complete == true) {
testResult=j.data.result_xml
r = null
j = null
return true
}
r = null
j = null
return false
}
echo &amp;quot;test complete with data: ${testResult}&amp;quot;
}
stage('Write Apptestai Test Result') {
sh &amp;quot;mkdir -p tmp/&amp;quot;
// Write File file:&amp;quot;tmp/TESTS-Apptestai.xml&amp;quot;, text: testResult, encoding: &amp;quot;UTF-8&amp;quot;
sh &amp;quot;echo -n '${testResult}' &amp;gt; tmp/TESTS-Apptestai.xml&amp;quot;
}
stage('jUnit Test') {
junit 'tmp/TESTS-*.xml'
}
}
&lt;/code>&lt;/pre>&lt;p>위 스크립트에서 다음 항목들을 수정하십시오.&lt;/p>
&lt;ul>
&lt;li>accessKey: apptest.ai의 액세스 키&lt;/li>
&lt;li>serviceProjectId: apptest.ai에 생성된 프로젝트의 고유번호 (Project ID)
&lt;ul>
&lt;li>apptest.ai 프로젝트 설정에 저장된 Time Limit과 디바이스 정보를 적용하여 테스트를 수행합니다.&lt;/li>
&lt;li>샘플 테스트 프로젝트의 설정 변경은 허용되지 않지만 새 프로젝트의 설정은 변경할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>apkFile: 테스트 할 대상 앱파일(App Binary File)&lt;/li>
&lt;/ul>
&lt;p>파이프 라인을 시작하려면 Jenkins에서 &amp;ldquo;Build Now&amp;quot;를 클릭하십시오.
&lt;figure>
&lt;img src="/images/1_jenkins_8.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="5-test-results">5. Test Results&lt;/h3>
&lt;p>테스트가 완료되면 JUnit XML 결과 형식의 테스트 결과가 Callback URL을 통해 Jenkins에 자동으로 전달됩니다. Jenkins는 반환 된 테스트 결과를 반영합니다.&lt;/p>
&lt;p>자세한 테스트결과 분석 정보는 [apptest.ai] (&lt;a href="https://apptest.ai">https://apptest.ai&lt;/a>)를 방문해 확인하실 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Jenkins에서 테스트 결과보기
&lt;figure>
&lt;img src="/images/1_jenkins_9.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_10.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_11.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_12.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_13.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_14.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>apptest.ai 에서 테스트 결과보기
&lt;figure>
&lt;img src="/images/1_jenkins_15.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_16.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_17.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_18.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Integrations: 2. Travis CI</title><link>/ko/integrations/2_travisci/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>/ko/integrations/2_travisci/</guid><description>
&lt;h2 id="apptestai-integration-for-travis-ci">apptest.ai Integration for Travis CI&lt;/h2>
&lt;p>몇 줄의 스크립트만으로 apptest.ai를 Travis CI와 함께 사용하여 testbot에서 앱을 탐색하고 모든 빌드 프로세스에 대한 결과를보고 할 수 있습니다.&lt;/p>
&lt;p>Travis CI 파이프 라인 내에서 apptest.ai 서비스를 사용하려면 다음 두 단계를 수행하십시오. 1. apptest.ai의 액세스 키를 등록하고 2. apptest.ai를 빌드 스크립트 (travis.yml)에 추가하십시오.&lt;/p>
&lt;h4 id="adding-apptestai-access-key-onto-the-build-environment">Adding apptest.ai access key onto the build environment&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>apptest.ai 서비스의 Profile 페이지에서 액세스 키 문자열을 복사하십시오.
&lt;figure>
&lt;img src="/images/2_travisci_1.gif"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>APPTEST_AI_ACCESS_KEY라는 빌드 환경 변수에 apptest.ai 액세스 키를 추가하고 빌드 스크립트에 암호화를 추가하십시오.&lt;/p>
&lt;pre>&lt;code>$ travis login
$ travis encrypt APPTEST_AI_ACCESS_KEY=&amp;quot;ID:Acess Key&amp;quot; --add
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>액세스 키의 형식은 &amp;ldquo;apptest.ai ID : apptest.ai 액세스 키&amp;quot;가됩니다. 예를 들어, ID가 &lt;a href="mailto:jean@apptest.ai">jean@apptest.ai&lt;/a>이고 액세스 키가 &amp;ldquo;ab8f3e321d631c84c9b1113&amp;quot;인 경우 다음이 적용됩니다.&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>jean@apptest.ai:ab8f3e321d631c84c9b1113
&lt;/code>&lt;/pre>&lt;p>이 명령 후에 다음“env :”섹션이 기존 빌드 스크립트 파일에 추가됩니다. 이 섹션은 런타임시 APPTEST_AI_ACCESS_KEY 환경 변수 선언으로 대체됩니다.&lt;/p>
&lt;pre>&lt;code>env:
global:
- secure: fUnmuuqKmxWjxGHbfTB7QZgSmkB7yvt6KGAn8dCs1j4GneWbSIrEhghRrlOMQCThhMoetou4H+NaWeTXRRa4fpoCGm1U51RbD+J4DrbKWj3MzRupzByEAsaWhmvCaYVgCOlkYgaApcvujIrpw1rUTQVio8+WoYIXgXx3B
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>이제 apptest.ai에서 설정한 CI 도구 통합 스크립트를 다음과 같이 복제 한 후 다음을 실행하는 스크립트를 추가하십시오.&lt;/p>
&lt;pre>&lt;code>- git clone https://github.com/apptestai/ci_addon
- export binary_path=HackerNews.ipa
- export project_id='825'
- bash ./ci_addon/step.sh
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>서비스를 호출하려면 최소한 2 개의 arguments, binary_path 및 project_id가 필요합니다. binary_path는 테스트하려는 바이너리 파일의 경로입니다 (예 : Android 용 * .apk 파일 및 iOS 용 * .ipa 파일). project_id는 테스트 시간 및 테스트를 위한 장치 목록과 같은 설정을 포함하는 apptest.ai의 프로젝트 고유번호(Project ID)입니다. apptest.ai의 프로젝트 ID는 아래와 같이 프로젝트 정보 페이지에서 찾을 수 있습니다.&lt;/p>
&lt;/blockquote>
&lt;figure>
&lt;img src="/images/2_travisci_2.png"/>
&lt;/figure>
&lt;p>apptest.ai의 CI 통합 스크립트를 매번 다운로드하지 않으려면 프로젝트 저장소에 apptest.ai의 ci_addon 저장소를 미리 포함하십시오.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>빌드 스크립트를 커밋하면 Travis CI가 실행됩니다. apptest.ai 스크립트를 실행할 때 아래와 같이 테스트가 실행되고 결과가 콘솔에 인쇄됩니다.
&lt;figure>
&lt;img src="/images/2_travisci_3.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>테스트 결과는 자세한 HTML 형식의 보고서는 test-results/apptest-ai_result.html에 JUnit 테스트 결과 형식의 XML 문서는 test-results/apptestai/result.xml에 저장됩니다. Travis CI에서 제공하는 다양한 배포 기능을 사용하여이 파일을 외부에 저장할 수 있습니다. 아래는 Github의 릴리즈 예입니다. apptest.ai 테스트 보고서는 Github의 릴리스 페이지에 게시되어 있습니다.
&lt;figure>
&lt;img src="/images/2_travisci_4.gif"/>
&lt;/figure>
&lt;/p>
&lt;blockquote>
&lt;p>결과를 저장할 폴더의 위치를 변경하려면 test_result_path 환경 변수를 선언하고 전달하십시오. 테스트가 완료되기를 기다리지 않고 다음 빌드를 실행하려면 waiting_for_test_results 환경 변수를 선언하고 FALSE를 전달하십시오.&lt;/p>
&lt;/blockquote>
&lt;p>마지막으로 .travis.yml 예제가 있습니다. 먼저 Android의 &amp;ldquo;env&amp;quot;섹션에서 apptest.ai 액세스 키를 저장하기 위한 두 가지 보안 환경 변수와 Github acess 키를 배포하기 위한 두 가지 보안 환경 변수가 있음을 알 수 있습니다.
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/afb71bfb6981edbc109eb5b8511007de.js">&lt;/script>
&lt;/p>
&lt;p>iOS의 경우 iOS에는 등록 된 환경 변수가 두 개 더 필요합니다. 이것은 iOS에서 바이너리를 생성 할 때 필요한 Code sign을 위한 환경 변수입니다. 아래에서는 Code Sign에 Fastlane 매칭을 사용했습니다. Fastlane match는 Github에서 코드 서명에 필요한 인증서 파일과 프로비저닝 파일을 암호화하므로 인증서가 저장된 개인 GitHub 리포지토리에 액세스하기 위해 두 개의 액세스 토큰과 암호 해독 키가 추가됩니다.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/8c3756623d48b472e177bc473c5c9338.js">&lt;/script>
&lt;/li>
&lt;/ul></description></item><item><title>Integrations: 3. Circle CI</title><link>/ko/integrations/3_circleci/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>/ko/integrations/3_circleci/</guid><description>
&lt;h2 id="apptestai-integration-for-circle-ci">apptest.ai Integration for Circle CI&lt;/h2>
&lt;p>CircleCI 버전 2.1부터 orb라는 빌드 스크립트 공유 방법을 사용하게 됨으로써 단 몇 줄의 스크립트만으로 매 빌드마다 Testbot이 앱을 테스트한 결과를 보고받을 수 있습니다.&lt;/p>
&lt;p>CircleCI에서 빌드하는 동안 apptest.ai 서비스를 활성화하려면 : 1. 빌드 환경 변수에 apptest.ai 액세스 키를 등록합니다.&lt;/p>
&lt;h4 id="adding-apptestai-access-key-onto-the-build-environment">Adding apptest.ai access key onto the build environment&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>apptest.ai 서비스의 Profile 페이지에서 액세스 키 문자열을 복사하십시오.
&lt;figure>
&lt;img src="/images/3_circleci_1.gif"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CircleCI에 연결하고 빌드 프로젝트 이름 오른쪽의 설정 아이콘을 클릭하여 빌드 구성 페이지로 이동하십시오.
&lt;figure>
&lt;img src="/images/3_circleci_2.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>설정 페이지에서 환경 변수 메뉴를 선택하고 변수 추가 단추를 클릭하여 APPTEST_AI_ACCESS_KEY 변수를 작성하십시오.
&lt;figure>
&lt;img src="/images/3_circleci_3.png"/>
&lt;/figure>
&lt;/p>
&lt;p>변수 값을 &amp;ldquo;apptest.ai ID : apptest.ai 액세스 키&amp;quot;로 입력하십시오. 예를 들어 ID가 &lt;a href="mailto:jean@apptest.ai">jean@apptest.ai&lt;/a>이고 액세스 키가 &amp;ldquo;ab8f3e321d631c84c9b1113&amp;quot;인 경우입니다. 다음과 같이 등록하십시오.&lt;/p>
&lt;pre>&lt;code> jean@apptest.ai:ab8f3e321d631c84c9b1113
&lt;/code>&lt;/pre>&lt;p>다음은 일반적인 등록이며 access_key는 마스크 처리되고 출력됩니다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="adding-apptestai-test-step-to-the-build">Adding apptest.ai test step to the build&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>Include apptest.ai Orb&lt;/p>
&lt;p>테스트하려는 앱이 Android 인 경우 아래와 같이 android-app-test orb를 포함하십시오.&lt;/p>
&lt;pre>&lt;code>orbs:
apptest-ai: apptestai/android-app-test@volatile
&lt;/code>&lt;/pre>&lt;p>iOS 앱을 테스트하려면 아래 표시된대로 ios-app-test orb를 포함하십시오.&lt;/p>
&lt;pre>&lt;code>orbs:
apptest-ai: apptestai/ios-app-test@volatile
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Adding apptest.ai test build step&lt;/p>
&lt;p>빌드 워크 플로우의 어느 곳에나 apptest-ai 테스트 단계를 추가 할 수 있습니다.&lt;/p>
&lt;pre>&lt;code>- apptest-ai/run-test:
binary_path: app/build/outputs/apk/debug/app-debug.apk
project_id: '818'
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>서비스를 호출하려면 최소한 2 개의 arguments, binary_path 및 project_id가 필요합니다. binary_path는 테스트하려는 바이너리의 경로입니다. * Android의 경우 .apk 파일 및 iOS의 경우 * .ipa 파일입니다. project_id는 테스트 시간 및 테스트 할 장치 목록과 같은 설정이 포함 된 apptest.ai의 프로젝트 고유번호 (Project ID)입니다. apptest.ai의 프로젝트 ID는 아래와 같이 프로젝트 정보 페이지에서 찾을 수 있습니다.
&lt;figure>
&lt;img src="/images/3_circleci_4.png"/>
&lt;/figure>
&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Execute the build&lt;/p>
&lt;p>apptest-ai/run-test 단계는 apptest.ai로 테스트 요청을 보내고 테스트가 완료된 후 테스트 결과를 아래 그림과 같이 콘솔에 인쇄합니다.
&lt;figure>
&lt;img src="/images/3_circleci_5.png"/>
&lt;/figure>
&lt;/p>
&lt;blockquote>
&lt;p>apptest.ai 테스트 결과를 기다리지 않고 다음 빌드 단계로 넘어가려면 아래와 같이 waiting_for_test_results 인수를 FALSE로 설정하면 됩니다.&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>- apptest-ai/run-test:
binary_path: app/build/outputs/apk/debug/app-debug.apk
project_id: '818'
waiting_for_test_results: 'false'
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>(Optional) Storing test result&lt;/p>
&lt;p>콘솔에 출력 된 apptest.ai 테스트 결과는 기본적으로“test-results”디렉토리에 저장됩니다. CircleCI에서 제공 한 테스트 요약에 테스트 결과를 포함 시키려면 CircleCI에서 제공 한 store-test-results 단계를 추가하고 아래와 같이 apptest.ai의 테스트 결과 경로를 지정하십시오.&lt;/p>
&lt;pre>&lt;code>- store_test_results:
path: test-results
&lt;/code>&lt;/pre>&lt;p>Store-test 결과 단계를 추가하면 CircleCI는 아래와 같이 Test Summary 탭에 apptest.ai 테스트 결과와 다른 테스트 결과를 분석합니다.
&lt;figure>
&lt;img src="/images/3_circleci_6.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>(Optional) Storing test result&lt;/p>
&lt;p>테스트 요약은 매우 제한된 통과 / 실패 정보 만 제공하며 apptest.ai는 보다 자세한 테스트 결과 보고서를 별도의 HTML 형식으로 제공합니다. 이 보고서를 CircleCI의 아티팩트 섹션에 저장하려면 다음과 같이 CircleCI에서 제공 한 store_artifacts 단계를 추가하고 apptest.ai의 테스트 결과가 저장되는 경로를 지정하십시오.&lt;/p>
&lt;pre>&lt;code>- store_artifacts:
path: test-results
&lt;/code>&lt;/pre>&lt;p>저장된 테스트 보고서는 CircleCI의 아티팩트 탭에서 아래와 같이 조회됩니다.
&lt;figure>
&lt;img src="/images/3_circleci_7.png"/>
&lt;/figure>
&lt;/p>
&lt;p>이 html 파일을 클릭하면 아래와 같은 상세 보고서를 볼 수 있으며,이 html 파일을 클릭하면 아래와 같은 상세 보고서를 볼 수 있습니다.
&lt;figure>
&lt;img src="/images/3_circleci_8.png"/>
&lt;/figure>
&lt;/p>
&lt;blockquote>
&lt;p>테스트 결과를 저장하는 디렉토리를 변경하려면 apptest.ai 테스트 단계를 다음과 같이 실행할 때 test_result_path 인수에 경로를 전달할 수 있습니다.&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>- apptest-ai/run-test:
binary_path: app/build/outputs/apk/debug/app-debug.apk
project_id: '818'
test_result_path: app/build/outputs/apk/debug
&lt;/code>&lt;/pre>&lt;p>마지막으로 최종 .circleci / config.yml 파일 샘플이 있습니다. 아래는 안드로이드 용입니다.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/cc0804ab72097afffc718defe69b83e9.js">&lt;/script>
&lt;p>iOS:&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/078f9d25e81f75a2d61435c3684367f9.js">&lt;/script>
&lt;/li>
&lt;/ol></description></item><item><title>Integrations: 4. Circle CI with Saucelabs</title><link>/ko/integrations/4_circleciwithsaucelabs/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>/ko/integrations/4_circleciwithsaucelabs/</guid><description>
&lt;h2 id="saucelabs에서-circle-ci와-apptestai-모두-사용하기">SauceLabs에서 Circle CI와 apptest.ai 모두 사용하기&lt;/h2>
&lt;p>CircleCI에서 apptest.ai 서비스를 사용하여 스크립트를 작성없이 스모크 테스트(Smoke Test)를 Daily 빌드마다 수행하는 방법에 대한 튜토리얼이 있습니다. 이번에는 apptest.ai에서 제공하는 장치가 아니라 Sauce Labs에서 제공하는 장치를 사용하여 동일하게 테스트하는 방법을 소개합니다.&lt;/p>
&lt;p>CircleCI가 appTest.ai 서비스를 사용하는 방식과 다른 점은 apptest.ai의 액세스 키 대신 Sauce Labs API 키를 사용하고 apptest.ai 및 Sauce Labs 계정을 연결하는 것입니다. 현재 베타서비스로 운영중이며, apptest.ai 및 Sauce Labs 계정을 연결하려면 [contact@apptest.ai] (mailto : &lt;a href="mailto:contact@apptest.ai">contact@apptest.ai&lt;/a>)로 연락주시기 바랍니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>아래와 같이 Sauce Labs 서비스에 액세스하여 API 키를 얻습니다.
&lt;figure>
&lt;img src="/images/4_saucelabs_1.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>이전에 CircleCI에 apptest.ai 액세스 키를 등록한 것과 같은 방법으로 Sauce Labs API를 사용하여 CircleCI에서 APPTEST_AI_ACCESS_KEY를 등록하십시오
&lt;figure>
&lt;img src="/images/4_saucelabs_2.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sauce Labs 기반 apptest.ai 테스트 단계 orb를 CircleCI의 빌드 구성 파일 (circleci / config, yml)에 추가합니다. orb의 이름이 apptestai/android-app-test에서 apptestai/android-app-test-saucelabs로 바뀌 었다는 점을 제외하면 마찬가지입니다. 즉, 아래와 같이 orb를 입력해 줍니다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>orbs:
apptest-ai: apptestai/android-app-test-saucelabs@dev:0.1.9
&lt;/code>&lt;/pre>&lt;p>apptest.ai 테스트 단계를 추가하여 다음과 같이 테스트를 시작하십시오.&lt;/p>
&lt;pre>&lt;code>- apptest-ai/run-test:
binary_path: app/build/outputs/apk/debug/app-debug.apk
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>
&lt;p>빌드시 아래와 같이 Sauce Labs 계정에 등록 된 장치로 테스트 할 수 있으며, 결과는 CircleCI의 아티팩트 탭에 저장됩니다. Sauce Labs에 액세스하면 장치 로그를 포함한 자세한 테스트 데이터에 액세스 할 수 있습니다.
&lt;figure>
&lt;img src="/images/4_saucelabs_3.png"/>
&lt;/figure>
&lt;/p>
&lt;p>Sauce Labs에서 제공 한 LG G5 장치에서의 테스트가 성공적으로 완료되었습니다
&lt;figure>
&lt;img src="/images/4_saucelabs_4.png"/>
&lt;/figure>
&lt;/p>
&lt;p>CircleCI의 테스트 Summary는 테스트 봇의 결과도 보여줍니다.
&lt;figure>
&lt;img src="/images/4_saucelabs_5.png"/>
&lt;/figure>
&lt;/p>
&lt;p>CircleCI 아티팩트에서 HTML로 저장된 테스트 보고서를 확인하실 수 있습니다.
&lt;figure>
&lt;img src="/images/4_saucelabs_6.png"/>
&lt;/figure>
&lt;/p>
&lt;p>이 HTML을 열어 자세한 테스트 결과를 볼 수 있습니다.
&lt;figure>
&lt;img src="/images/4_saucelabs_7.png"/>
&lt;/figure>
&lt;/p>
&lt;p>테스트에 사용 된 LG G5 보고서의 세부 사항을 보려면 Sauce Labs에 접속하시면 됩니다.
&lt;figure>
&lt;img src="/images/4_saucelabs_8.png"/>
&lt;/figure>
&lt;/p>
&lt;p>SauceLabs에서는 CircleCI가 요청한 테스트 중에 수집 된 스크린 샷을 볼 수 있습니다.
&lt;figure>
&lt;img src="/images/4_saucelabs_9.png"/>
&lt;/figure>
&lt;/p>
&lt;p>SauceLabs에서는 CircleCI에서 테스트 중에 수집 된 자세한 장치 로그를 검색 할 수도 있습니다.&lt;/p>
&lt;h4 id="마지막으로-이-데모에-표시된-circleci에서-사용하는-전체-빌드-스크립트가-아래에-나와-있습니다">마지막으로, 이 데모에 표시된 CircleCI에서 사용하는 전체 빌드 스크립트가 아래에 나와 있습니다.&lt;/h4>
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/21d914c38dcc6f7f81cfe95b89a1969c.js">&lt;/script>
&lt;/li>
&lt;/ol></description></item></channel></rss>