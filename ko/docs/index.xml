<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>apptest.ai – Documentation</title><link>/ko/docs/</link><description>Recent content in Documentation on apptest.ai</description><generator>Hugo -- gohugo.io</generator><atom:link href="/ko/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 1. Jenkins</title><link>/ko/docs/integrations/1_jenkins/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>/ko/docs/integrations/1_jenkins/</guid><description>
&lt;h2 id="apptestai-integration-for-jenkins">apptest.ai Integration for Jenkins&lt;/h2>
&lt;h5 id="automating-android-and-ios-app-testing-with-a-jenkins-pipeline">Automating Android and iOS app testing with a jenkins pipeline&lt;/h5>
&lt;p>This document explains how to configure Jenkins and use our APIs to automatically run apptest.ai tests from the build phase.&lt;/p>
&lt;p>Please refer to the link &lt;a href="https://jenkins.io/doc/pipeline/tour/getting-started/">Jenkins Setup Guide&lt;/a> for Jenkins installations&lt;/p>
&lt;h3 id="1-apptestai--integration-api">1. Apptest.ai – Integration API&lt;/h3>
&lt;p>&lt;span style="background-color: #5cb85c;padding: 5px 10px;border-radius: 5px;color: #fff;margin-right: 10px;"> POST &lt;/span>
&lt;span style="background-color: #f9f2f4;color: #c7254e;padding: 5px 10px;border-radius: 5px;">&lt;a href="https://api.apptest.ai/tests_set/queuing?access_key=%7BACCESS_KEY%7D">https://api.apptest.ai/tests_set/queuing?access_key={ACCESS_KEY}&lt;/a>&lt;/span>&lt;/p>
&lt;p>JSON Data parameters&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Required / Optional&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>callback&lt;/td>
&lt;td>String&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>A callback URL, triggered when testing is complete&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pid&lt;/td>
&lt;td>Integer&lt;/td>
&lt;td>Required&lt;/td>
&lt;td>The existing project ID in apptest.ai&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>test_set_name&lt;/td>
&lt;td>String&lt;/td>
&lt;td>Required&lt;/td>
&lt;td>A test name to be created in the apptest.ai project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>login_id&lt;/td>
&lt;td>String&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>The ID of the account to enter When Testbot encounter Sign in screen.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>login_pw&lt;/td>
&lt;td>String&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>The password of the account to enter when Testbot encounter Sign in screen,&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>use_vo&lt;/td>
&lt;td>Integer (0 or 1)&lt;/td>
&lt;td>Optional&lt;/td>
&lt;td>An option to enable / disable the AT&amp;amp;T Video Optimizer (ARO) for testing&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>File Parameters&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Required / Optional&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>apk_file&lt;/td>
&lt;td>File&lt;/td>
&lt;td>Required&lt;/td>
&lt;td>App binary file for the app to the tested&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Example Response&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;data&amp;quot;: {
&amp;quot;test_count&amp;quot;: 1, // Test Count (Integer),
&amp;quot;tsid&amp;quot;: 192948 // Test Set ID (Integer)
},
&amp;quot;errorCode&amp;quot;: 0,
&amp;quot;reason&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;result&amp;quot;: &amp;quot;ok&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>Callback result data format&lt;/p>
&lt;p>The testing result in the JUnit XML Format is returned using the callback URL&lt;/p>
&lt;pre>&lt;code>&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;testsuites name=&amp;quot;TestBot Test&amp;quot;&amp;gt;
&amp;lt;testsuite name=&amp;quot;TestBot Test.Apk File Name (with Version)&amp;quot;&amp;gt;
&amp;lt;testcase name=&amp;quot;Device Name 1&amp;quot; time=&amp;quot;Test Duration (sec)&amp;quot;&amp;gt;
&amp;lt;/testcase&amp;gt;
&amp;lt;testcase name=&amp;quot;Device Name 2&amp;quot; time=&amp;quot;Test Duration (sec)&amp;quot;&amp;gt;
&amp;lt;error message=&amp;quot;apptest.ai Result Page Link&amp;quot;&amp;gt;&amp;lt;/error&amp;gt;
&amp;lt;/testcase&amp;gt;
...
&amp;lt;/testsuite&amp;gt;
&amp;lt;/testsuites&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;span style="background-color: #5cb85c;padding: 5px 10px;border-radius: 5px;color: #fff;margin-right: 10px;"> GET &lt;/span>
&lt;span style="background-color: #f9f2f4;color: #c7254e;padding: 5px 10px;border-radius: 5px;">&lt;a href="https://api.apptest.ai/tests_set/%7Btsid%7D/ci_info?access_key=ACCESS_KEY">https://api.apptest.ai/tests_set/{tsid}/ci_info?access_key=ACCESS_KEY&lt;/a>&lt;/span>&lt;/p>
&lt;pre>&lt;code>Response
{
&amp;quot;complete&amp;quot;: true,
&amp;quot;data&amp;quot;: {
&amp;quot;result_xml&amp;quot;: &amp;quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;testsuites name=&amp;quot;TestBot Test&amp;quot;&amp;gt; &amp;lt;testsuite name=&amp;quot;TestBot Test.Apk File Name (with Version)&amp;quot;&amp;gt; &amp;lt;testcase name=&amp;quot;Device Name 1&amp;quot; time=&amp;quot;Test Duration (sec)&amp;quot;&amp;gt; &amp;lt;/testcase&amp;gt; &amp;lt;testcase name=&amp;quot;Device Name 2&amp;quot; time=&amp;quot;Test Duration (sec)&amp;quot;&amp;gt; &amp;lt;error message=&amp;quot;Apptes.ai Result Page Link&amp;quot;&amp;gt;&amp;lt;/error&amp;gt; &amp;lt;/testcase&amp;gt; ... &amp;lt;/testsuite&amp;gt; &amp;lt;/testsuites&amp;gt;&amp;quot;
},
&amp;quot;errorCode&amp;quot;: 0,
&amp;quot;reason&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;result&amp;quot;: &amp;quot;ok&amp;quot;
}
&lt;/code>&lt;/pre>&lt;h3 id="2-apptestai--access-key-and-project-id">2. apptest.ai – Access Key and Project ID&lt;/h3>
&lt;p>To integrate apptest.ai into a Jenkins pipline, an access key and a project ID are required.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>How to find the access key: An access key is automatically issued when you sign up with apptest.ai. You can locate it in the apptest.ai profile page
&lt;figure>
&lt;img src="/images/1_jenkins_1.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_2.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How to find the project ID: A project ID is assigned when you create a testing project
&lt;figure>
&lt;img src="/images/1_jenkins_3.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_4.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>By default, a Sample Test Project Page is created automatically once you sign in.&lt;/p>
&lt;p>Changing the settings in the Sample Test Project is not supported. However, you can change the settings for your new projects.&lt;/p>
&lt;h3 id="3-jenkins--webhook-step-plugin-installation">3. Jenkins – Webhook Step Plugin Installation&lt;/h3>
&lt;p>Search and install the “Webhook step” Plugin in the Jenkins dashboard: [Manage Jenkins] -&amp;gt; [Manage Plugins] -&amp;gt; [Available]&lt;/p>
&lt;p>Skip this step if you are using the apptest.ai Test Stage Code2 source code that uses polling instead of webhook in the next stage.&lt;/p>
&lt;h3 id="4-jenkins--pipeline-configuration">4. Jenkins – Pipeline configuration&lt;/h3>
&lt;p>This section demonstraters how to connect an apptest.ai Test stage to a Jenkins pipeline item. A Jenkins pipeline item is must be already created.&lt;/p>
&lt;p>Please refer to the Example Link for more detail.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Go to the setup page and click on the Configure page.
&lt;figure>
&lt;img src="/images/1_jenkins_5.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_6.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On the pipeline definition page, add the apptest.ai Test Stage Code to the Script box
&lt;figure>
&lt;img src="/images/1_jenkins_7.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="apptestai-test-stage-code-1--webhook">[apptest.ai Test Stage Code 1] – Webhook&lt;/h5>
&lt;pre>&lt;code>import groovy.json.JsonSlurper
node {
def gitRepository
def androidHome
def apkFile
def accessKey
def serviceProjectId
def asyncResult
def serviceUrl
def serviceHost
def serviceCompleteCheckUrl
// Add to your Preparation Stage
stage('Preparation') {
// Git Repository URL Address
gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git'
// Android Home Path
androidHome = '/opt/apps/android-sdk'
echo &amp;quot;Current workspace : ${workspace}&amp;quot;
accessKey = 'e40c4487b3cf5e6d53ef0543d2614488'
serviceProjectId = 376
serviceHost = &amp;quot;https://api.apptest.ai&amp;quot;
serviceUrl = &amp;quot;${serviceHost}/test_set/queuing?access_key=${accessKey}&amp;quot;
}
// Git Source Clone Stage
stage('Clone source') {
git branch: 'master', url: gitRepository
}
// Android SDK directory path Setting
stage('SDK Configure') {
sh &amp;quot;echo 'sdk.dir=${androidHome}' &amp;gt; local.properties&amp;quot;
}
// Gradle AssembleDebug Build Stage
stage('Gradle Debug build') {
sh &amp;quot;./gradlew :app:assembleDebug&amp;quot;
}
// apptest.ai Test Stage
stage('Apptestai Test') {
apkFile=&amp;quot;path/to/file/your_app.apk&amp;quot;
hook = registerWebhook()
// Call apptest.ai's Test API.
// Refer to 1. API Spec
r = sh(returnStdout: true, script: &amp;quot;curl -X POST -F 'apk_file=@\&amp;quot;${apkFile}\&amp;quot;' -F 'data={\&amp;quot;pid\&amp;quot;: ${serviceProjectId}, \&amp;quot;test_set_name\&amp;quot;: \&amp;quot;${env.BUILD_TAG}\&amp;quot;, \&amp;quot;callback\&amp;quot;: \&amp;quot;${hook.getURL()}\&amp;quot;}' ${serviceUrl}&amp;quot;).toString().trim()
j = new JsonSlurper().parseText(r)
echo &amp;quot;jsonParse Result: ${j}&amp;quot;
if (j.errorCode != 0) {
echo &amp;quot;apptest.ai Test cannot started. ${r}&amp;quot;
r = null
j = null
error &amp;quot;FAIL&amp;quot;
}
tsid=j['data']['tsid']
echo &amp;quot;apptest.ai TestSet id : ${tsid}&amp;quot;
echo &amp;quot;Waiting for POST to ${hook.getURL()}&amp;quot;
// Wait for Test Complete signal
waitForWebhook hook
// Get the Test Result Data
// Refer to 1. API Spec
serviceCompleteCheckUrl = &amp;quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}&amp;quot;
r = sh( returnStdout: true, script: &amp;quot;curl -X GET ${serviceCompleteCheckUrl}&amp;quot;).toString().trim()
j = new JsonSlurper().parseText(r)
asyncResult = j.data.result_xml
echo &amp;quot;Webhook called with data: ${asyncResult}&amp;quot;
}
stage('Write Apptestai Test Result') {
sh &amp;quot;mkdir -p tmp/&amp;quot;
// Write File file:&amp;quot;tmp/TESTS-Apptestai.xml&amp;quot;, text: asyncResult, encoding: &amp;quot;UTF-8&amp;quot;
sh &amp;quot;echo -n '${asyncResult}' &amp;gt; tmp/TESTS-Apptestai.xml&amp;quot;
}
stage('jUnit Test') {
junit 'tmp/TESTS-*.xml'
}
}
&lt;/code>&lt;/pre>&lt;h5 id="apptestai-test-stage-code-2--polling">[apptest.ai Test Stage Code 2] – Polling&lt;/h5>
&lt;pre>&lt;code>import groovy.json.JsonSlurper
node {
def gitRepository
def androidHome
def apkFile
def accessKey
def serviceProjectId
def testResult
def serviceUrl
def serviceHost
def serviceCompleteCheckUrl
// Add to your Preparation Stage
stage('Preparation') {
// Git Repository URL Address
gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git'
// Android Home Path
androidHome = '/opt/apps/android-sdk'
echo &amp;quot;Current workspace : ${workspace}&amp;quot;
accessKey = 'e40c4487b3cf5e6d53ef0543d2614488'
serviceProjectId = 376
serviceHost = &amp;quot;https://api.apptest.ai&amp;quot;
serviceUrl = &amp;quot;${serviceHost}/test_set/queuing?access_key=${accessKey}&amp;quot;
}
// Git Source Clone Stage
stage('Clone source') {
git branch: 'master', url: gitRepository
}
// Android SDK directory path Setting
stage('SDK Configure') {
sh &amp;quot;echo 'sdk.dir=${androidHome}' &amp;gt; local.properties&amp;quot;
}
// Gradle AssembleDebug Build Stage
stage('Gradle Debug build') {
sh &amp;quot;./gradlew :app:assembleDebug&amp;quot;
}
// Apptest.ai Test Stage
stage('apptestai Test') {
apkFile=&amp;quot;path/to/file/your_app.apk&amp;quot;
// Call apptest.ai\'s Test API.
r = sh(returnStdout: true, script: &amp;quot;curl -X POST -F 'apk_file=@\&amp;quot;${apkFile}\&amp;quot;' -F 'data={\&amp;quot;pid\&amp;quot;: ${serviceProjectId}, \&amp;quot;test_set_name\&amp;quot;: \&amp;quot;${env.BUILD_TAG}\&amp;quot;}' ${serviceUrl}&amp;quot;).toString().trim()
j = new JsonSlurper().parseText(r)
echo &amp;quot;jsonParse Result: ${j}&amp;quot;
if (j.errorCode != 0) {
echo &amp;quot;apptest.ai Test cannot started. ${r}&amp;quot;
r = null
j = null
error &amp;quot;FAIL&amp;quot;
}
tsid=j['data']['tsid']
echo &amp;quot;Apptest.ai TestSet id : ${tsid}&amp;quot;
// Get the Test Result Data
// Refer to 1. API Spec
serviceCompleteCheckUrl=&amp;quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}&amp;quot;
r = null
j = null
waitUntil {
sleep (time: 10, unit: &amp;quot;SECONDS&amp;quot;)
r = sh( returnStdout: true, script: &amp;quot;curl -X GET ${serviceCompleteCheckUrl}&amp;quot;).toString().trim()
j = new JsonSlurper().parseText(r)
complete=j.complete
echo &amp;quot;ci_info result : ${complete}&amp;quot;
if (complete == true) {
testResult=j.data.result_xml
r = null
j = null
return true
}
r = null
j = null
return false
}
echo &amp;quot;test complete with data: ${testResult}&amp;quot;
}
stage('Write Apptestai Test Result') {
sh &amp;quot;mkdir -p tmp/&amp;quot;
// Write File file:&amp;quot;tmp/TESTS-Apptestai.xml&amp;quot;, text: testResult, encoding: &amp;quot;UTF-8&amp;quot;
sh &amp;quot;echo -n '${testResult}' &amp;gt; tmp/TESTS-Apptestai.xml&amp;quot;
}
stage('jUnit Test') {
junit 'tmp/TESTS-*.xml'
}
}
&lt;/code>&lt;/pre>&lt;p>You can change the following items in the above script.&lt;/p>
&lt;ul>
&lt;li>accessKey: The access key from apptest.ai&lt;/li>
&lt;li>serviceProjectId: The project ID created in apptest.ai
&lt;ul>
&lt;li>Testing is performed with preset devices within a time limit defined in the apptest.ai project configuration.&lt;/li>
&lt;li>Changing the settings for the Sample Test Project is not allowed, but you can change the settings in a new project.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>apkFile: The app path (App Binary File) to be tested&lt;/li>
&lt;/ul>
&lt;p>Click “Build Now” in Jenkins to start the pipeline.
&lt;figure>
&lt;img src="/images/1_jenkins_8.png"/>
&lt;/figure>
&lt;/p>
&lt;h3 id="5-test-results">5. Test Results&lt;/h3>
&lt;p>Once the testing is complete, the testing results in the JUnit XML result format are automatically passed onto Jenkins with a callback URL. Jenkins reflects the returned testing rsults.&lt;/p>
&lt;p>For more detailed analysis, please visit &lt;a href="https://apptest.ai">apptest.ai&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>View Testing Results in Jenkins
&lt;figure>
&lt;img src="/images/1_jenkins_9.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_10.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_11.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_12.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_13.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_14.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>View Testing Results in apptest.ai
&lt;figure>
&lt;img src="/images/1_jenkins_15.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_16.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_17.png"/>
&lt;/figure>
&lt;figure>
&lt;img src="/images/1_jenkins_18.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 2. Travis CI</title><link>/ko/docs/integrations/2_travisci/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>/ko/docs/integrations/2_travisci/</guid><description>
&lt;h2 id="apptestai-integration-for-travis-ci">apptest.ai Integration for Travis CI&lt;/h2>
&lt;p>With just a few lines of script, you can enable apptest.ai along with Travis CI for out testbot to explore your apps and report results for every build process.&lt;/p>
&lt;p>To use the apptest.ai service within Travis CI pipeline, you can take the following two steps: 1. Register the apptest.ai Access Key, and 2. add the apptest.ai to your build script (travis.yml)&lt;/p>
&lt;h4 id="adding-apptestai-access-key-onto-the-build-environment">Adding apptest.ai access key onto the build environment&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Copy the access key string from the apptest.ai service profile page
&lt;figure>
&lt;img src="/images/2_travisci_1.gif"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add apptest.ai access key to the build envirronment variable named APPTEST_AI_ACCESS_KEY and add the encryprion to the build script&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>$ travis login
$ travis encrypt APPTEST_AI_ACCESS_KEY=&amp;quot;ID:Acess Key&amp;quot; --add
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>The format for the access key becomes “apptest.ai ID: apptest.ai Access Key“. For example, if the ID is &lt;a href="mailto:jean@apptest.ai">jean@apptest.ai&lt;/a> and the access key is “ab8f3e321d631c84c9b1113”, the following applies:&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>jean@apptest.ai:ab8f3e321d631c84c9b1113
&lt;/code>&lt;/pre>&lt;p>After this command, the following “env:” section is added to the existing build script file. This section is replaced by the APPTEST_AI_ACCESS_KEY environment variable declaration at run time.&lt;/p>
&lt;pre>&lt;code>env:
global:
- secure: fUnmuuqKmxWjxGHbfTB7QZgSmkB7yvt6KGAn8dCs1j4GneWbSIrEhghRrlOMQCThhMoetou4H+NaWeTXRRa4fpoCGm1U51RbD+J4DrbKWj3MzRupzByEAsaWhmvCaYVgCOlkYgaApcvujIrpw1rUTQVio8+WoYIXgXx3B
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Now, add a script that executes the following after cloning the CI Tool integration script set by apptest.ai as follows.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>- git clone https://github.com/apptestai/ci_addon
- export binary_path=HackerNews.ipa
- export project_id='825'
- bash ./ci_addon/step.sh
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>At least two arguments, binary_path and project_id, are required to invoke the service. binary_path is the path to the binary you want to test, i.e. * .apk files for android and * .ipa files for iOS. project_id is the Project ID for apptest.ai that contains the settings such as test time and device list for testing. The Project ID of apptest.ai can be found on the project information page as shown below.&lt;/p>
&lt;/blockquote>
&lt;figure>
&lt;img src="/images/2_travisci_2.png"/>
&lt;/figure>
&lt;p>If you don’t want to download apptest.ai’s CI integration script every time, include apptest.ai’s ci_addon repository in the Project Repository in advance.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Once you commit the build script, Travis CI will execute. When running apptest.ai script, the test is executed as shown below and the result is printed on the console.
&lt;figure>
&lt;img src="/images/2_travisci_3.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The test results are stored in test-results/apptest-ai_result.html with detailed HTML report and an XML document in JUnit Test result format in test-results /apptestai/result.xml. You can save this file externally using various deploy functions provided by Travis CI. Below is an example of a release on Github. You can see the apptest.ai test report posted on Github’s release page.
&lt;figure>
&lt;img src="/images/2_travisci_4.gif"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>If you want to change the location of the folder to store results, declare and pass test_result_path environment variable. If you want to execute the next build without waiting for the test to finish, declare waiting_for_test_results environment variable and pass FALSE.&lt;/p>
&lt;/blockquote>
&lt;p>Finally, here’s the .travis.yml example. First, for Android, in the “env” section, you can see that there are two secure environment variables for storing apptest.ai access key and two secure environment variables for Github acess key to deploy.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/afb71bfb6981edbc109eb5b8511007de.js">&lt;/script>
&lt;p>For an iOS case, iOS needs two more registered environment variables. This is an environment variable for code sign which is required when creating binary on iOS. Below we used a Fastlane match for the code sign. Fastlane match encrypts the certificate file and provisioning file required for code signing on Github, so two more access tokens and decryption keys are added to access a private GitHub repository where the certificate is stored compared to Android.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/8c3756623d48b472e177bc473c5c9338.js">&lt;/script></description></item><item><title>Docs: 3. Circle CI</title><link>/ko/docs/integrations/3_circleci/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>/ko/docs/integrations/3_circleci/</guid><description>
&lt;h2 id="apptestai-integration-for-circle-ci">apptest.ai Integration for Circle CI&lt;/h2>
&lt;p>Starting with CircleCI version 2.1, the build script sharing method called orb allows you to have Testbot test your app and report the results in every build with just a few lines of scripts.&lt;/p>
&lt;p>To enable the apptest.ai service during a build in CircleCI: 1. Register the apptest.ai access key in the build environment variable.&lt;/p>
&lt;h4 id="adding-apptestai-access-key-onto-the-build-environment">Adding apptest.ai access key onto the build environment&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>Copy the access key string from the apptest.ai service profile page
&lt;figure>
&lt;img src="/images/3_circleci_1.gif"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect to CircleCI and click the Setting icon to the right of the build project name to go to the build configuration page.
&lt;figure>
&lt;img src="/images/3_circleci_2.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>From the Setup page, select Environment variables menu and click Add Variables button to create the variable APPTEST_AI_ACCESS_KEY.
&lt;figure>
&lt;img src="/images/3_circleci_3.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Enter the value of the variable as “apptest.ai ID: apptest.ai Access Key”. For example, if the ID is &lt;a href="mailto:jean@apptest.ai">jean@apptest.ai&lt;/a> and the access key is “ab8f3e321d631c84c9b1113”. Register one as follows.&lt;/p>
&lt;pre>&lt;code>jean@apptest.ai:ab8f3e321d631c84c9b1113
&lt;/code>&lt;/pre>&lt;p>The following is the normal registration and access_key is masked and printed.&lt;/p>
&lt;h4 id="adding-apptestai-test-step-to-the-build">Adding apptest.ai test step to the build&lt;/h4>
&lt;ol>
&lt;li>Include apptest.ai Orb&lt;/li>
&lt;/ol>
&lt;p>If the app you want to test is in Android, include android-app-test orb as shown below.&lt;/p>
&lt;pre>&lt;code>orbs:
apptest-ai: apptestai/android-app-test@volatile
&lt;/code>&lt;/pre>&lt;p>To test your iOS App, include ios-app-test orb as shown below.&lt;/p>
&lt;pre>&lt;code>orbs:
apptest-ai: apptestai/ios-app-test@volatile
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>Adding apptest.ai test build step&lt;/li>
&lt;/ol>
&lt;p>You can add apptest-ai test steps anywhere in your build workflow.&lt;/p>
&lt;pre>&lt;code>- apptest-ai/run-test:
binary_path: app/build/outputs/apk/debug/app-debug.apk
project_id: '818'
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>At least two arguments, binary_path and project_id, are required to invoke the service. binary_path is the path to the binary you want to test: * .apk files for android and * .ipa files for iOS. project_id is the ID for apptest.ai that contains the settings such as test time and device list for testing. The Project ID of apptest.ai can be found on the Project Information page as shown below.&lt;/p>
&lt;/blockquote>
&lt;figure>
&lt;img src="/images/3_circleci_4.png"/>
&lt;/figure>
&lt;ol start="3">
&lt;li>Execute the build&lt;/li>
&lt;/ol>
&lt;p>The apptest-ai/run-test step sends a request to test with apptest.ai and after the test is complete, prints the test result to the console as shown below.
&lt;figure>
&lt;img src="/images/3_circleci_5.png"/>
&lt;/figure>
&lt;/p>
&lt;blockquote>
&lt;p>If you want to move on to the next build step without waiting for the apptest.ai test result, you can set FALSE to the waiting_for_test_results argument as shown below.&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>- apptest-ai/run-test:
binary_path: app/build/outputs/apk/debug/app-debug.apk
project_id: '818'
waiting_for_test_results: 'false'
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>(Optional) Storing test result&lt;/li>
&lt;/ol>
&lt;p>apptest.ai test result printed in the console is saved under “test-results” directory by default. To include the test results in the Test Summary provided by CircleCI, add the store-test-results step provided by CircleCI and specify the test result path of apptest.ai as shown below.&lt;/p>
&lt;pre>&lt;code>- store_test_results:
path: test-results
&lt;/code>&lt;/pre>&lt;p>If you add the store-test result step, CircleCI analyzes the test result of apptest.ai along with other test results in the Test Summary tab as below.
&lt;figure>
&lt;img src="/images/3_circleci_6.png"/>
&lt;/figure>
&lt;/p>
&lt;ol start="5">
&lt;li>(Optional) Storing test result&lt;/li>
&lt;/ol>
&lt;p>Because Test Summary only provides very limited pass/fail information, apptest.ai provides a more detailed test result report in a separate HTML format. To save this report in the Artifact section of CircleCI, add the store_artifacts step provided by CircleCI as below and specify the path where test results of apptest.ai are saved.&lt;/p>
&lt;pre>&lt;code>- store_artifacts:
path: test-results
&lt;/code>&lt;/pre>&lt;p>Saved test report is inquired as below in Artifacts tab in CircleCI.
&lt;figure>
&lt;img src="/images/3_circleci_7.png"/>
&lt;/figure>
&lt;/p>
&lt;p>If you click this html file, you can see the detailed report as below.
&lt;figure>
&lt;img src="/images/3_circleci_8.png"/>
&lt;/figure>
&lt;/p>
&lt;blockquote>
&lt;p>If you want to change the directory that stores the test results, you can pass the path to the test_result_path argument when you run the apptest.ai test step as below.&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>- apptest-ai/run-test:
binary_path: app/build/outputs/apk/debug/app-debug.apk
project_id: '818'
test_result_path: app/build/outputs/apk/debug
&lt;/code>&lt;/pre>&lt;p>Finally, here’s the sample the final .circleci / config.yml file. Below is for Android.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/cc0804ab72097afffc718defe69b83e9.js">&lt;/script>
&lt;p>And iOS:&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/078f9d25e81f75a2d61435c3684367f9.js">&lt;/script></description></item><item><title>Docs: 4. Circle CI with Saucelabs</title><link>/ko/docs/integrations/4_circleciwithsaucelabs/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>/ko/docs/integrations/4_circleciwithsaucelabs/</guid><description>
&lt;h2 id="using-apptestai-with-circle-ci-on-saucelabs">Using apptest.ai with Circle CI on SauceLabs&lt;/h2>
&lt;p>We have a tutorial on how to use the apptest.ai service on CircleCI to perform a daily build which is running a smoke test without writing a single line of code. This time, I will introduce how to test the same using a device provided by Sauce Labs, not a device provided by apptest.ai.&lt;/p>
&lt;p>The only change from the way the CircleCI used the appTest.ai service is to use Sauce Labs API Keys instead of apptest.ai’s access keys, and to associate the apptest.ai and Sauce Labs accounts. If you are interested in linking your apptest.ai and Sauce Labs accounts during the current Beta period, please send an email to &lt;a href="mailto:contact@apptest.ai">contact@apptest.ai&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Access to Sauce Labs service as below and obtain your API key
&lt;figure>
&lt;img src="/images/4_saucelabs_1.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Register the APPTEST_AI_ACCESS_KEY in CircleCI using Sauce Labs API the same way that your previously registered the apptest.ai access key in CircleCI
&lt;figure>
&lt;img src="/images/4_saucelabs_2.png"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add Sauce Labs-based apptest.ai Test Step orb to CircleCI’s build configuration file (circleci/config,yml). The same is true except that orb has been renamed from apptestai/android-app-test to apptestai/android-app-test-saucelabs. In other words, include orb as below:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>orbs:
apptest-ai: apptestai/android-app-test-saucelabs@dev:0.1.9
&lt;/code>&lt;/pre>&lt;p>Add apptest.ai test step to start testing as below&lt;/p>
&lt;pre>&lt;code> - apptest-ai/run-test:
binary_path: app/build/outputs/apk/debug/app-debug.apk
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>When you build, you can test with the device registered in your Sauce Labs account as below, and the result is saved in the Artifacts tab in CircleCI. More detailed test data including device log can be accessed by accessing Sauce Labs.
&lt;figure>
&lt;img src="/images/4_saucelabs_3.png"/>
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;p>Test on LG G5 provided by Sauce Labs has been successfully completed
&lt;figure>
&lt;img src="/images/4_saucelabs_4.png"/>
&lt;/figure>
&lt;/p>
&lt;p>The test summary of CircleCI also demonstrates the result the testbot
&lt;figure>
&lt;img src="/images/4_saucelabs_5.png"/>
&lt;/figure>
&lt;/p>
&lt;p>You can find the test report saved in HTML from in CircleCI Artifacts.
&lt;figure>
&lt;img src="/images/4_saucelabs_6.png"/>
&lt;/figure>
&lt;/p>
&lt;p>You can open this HTML to see the detailed test results
&lt;figure>
&lt;img src="/images/4_saucelabs_7.png"/>
&lt;/figure>
&lt;/p>
&lt;p>Connect to Sauce Labs to see the details of the LG G5 report used in the test
&lt;figure>
&lt;img src="/images/4_saucelabs_8.png"/>
&lt;/figure>
&lt;/p>
&lt;p>Sauce Labs can view the screen shots collected during the tests requested by CircleCI
&lt;figure>
&lt;img src="/images/4_saucelabs_9.png"/>
&lt;/figure>
&lt;/p>
&lt;p>In Sauce Labs, you can search the detailed device log collected during the test on the CircleCI&lt;/p>
&lt;h4 id="finally-the-full-build-script-used-by-circleci-shown-in-this-demo-is-shown-below">Finally, the full build script used by CircleCI shown in this demo is shown below.&lt;/h4>
&lt;script type="application/javascript" src="https://gist.github.com/genie-park/21d914c38dcc6f7f81cfe95b89a1969c.js">&lt;/script></description></item></channel></rss>