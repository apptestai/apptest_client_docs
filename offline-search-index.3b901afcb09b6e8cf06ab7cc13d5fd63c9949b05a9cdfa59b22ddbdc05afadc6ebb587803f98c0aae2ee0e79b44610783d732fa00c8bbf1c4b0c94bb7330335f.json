[{"body":"apptest.ai Integration for Jenkins Automating Android and iOS app testing with a jenkins pipeline This document explains how to configure Jenkins and use our APIs to automatically run apptest.ai tests from the build phase.\nPlease refer to the link Jenkins Setup Guide for Jenkins installations\n1. Apptest.ai – Integration API POST  https://api.apptest.ai/tests_set/queuing?access_key={ACCESS_KEY}\nJSON Data parameters\n   Name Type Required / Optional Description     callback String Optional A callback URL, triggered when testing is complete   pid Integer Required The existing project ID in apptest.ai   test_set_name String Required A test name to be created in the apptest.ai project   login_id String Optional The ID of the account to enter When Testbot encounter Sign in screen.   login_pw String Optional The password of the account to enter when Testbot encounter Sign in screen,   use_vo Integer (0 or 1) Optional An option to enable / disable the AT\u0026amp;T Video Optimizer (ARO) for testing    File Parameters\n   Name Type Required / Optional Description     apk_file File Required App binary file for the app to the tested    Example Response\n{ \u0026quot;data\u0026quot;: { \u0026quot;test_count\u0026quot;: 1, // Test Count (Integer), \u0026quot;tsid\u0026quot;: 192948 // Test Set ID (Integer) }, \u0026quot;errorCode\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;ok\u0026quot; } Callback result data format\nThe testing result in the JUnit XML Format is returned using the callback URL\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;TestBot Test.Apk File Name (with Version)\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 1\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 2\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;apptest.ai Result Page Link\u0026quot;\u0026gt;\u0026lt;/error\u0026gt; \u0026lt;/testcase\u0026gt; ... \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt; GET  https://api.apptest.ai/tests_set/{tsid}/ci_info?access_key=ACCESS_KEY\nResponse { \u0026quot;complete\u0026quot;: true, \u0026quot;data\u0026quot;: { \u0026quot;result_xml\u0026quot;: \u0026quot;\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;TestBot Test.Apk File Name (with Version)\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 1\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 2\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;Apptes.ai Result Page Link\u0026quot;\u0026gt;\u0026lt;/error\u0026gt; \u0026lt;/testcase\u0026gt; ... \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt;\u0026quot; }, \u0026quot;errorCode\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;ok\u0026quot; } 2. apptest.ai – Access Key and Project ID To integrate apptest.ai into a Jenkins pipline, an access key and a project ID are required.\n  How to find the access key: An access key is automatically issued when you sign up with apptest.ai. You can locate it in the apptest.ai profile page       How to find the project ID: A project ID is assigned when you create a testing project       By default, a Sample Test Project Page is created automatically once you sign in.\nChanging the settings in the Sample Test Project is not supported. However, you can change the settings for your new projects.\n3. Jenkins – Webhook Step Plugin Installation Search and install the “Webhook step” Plugin in the Jenkins dashboard: [Manage Jenkins] -\u0026gt; [Manage Plugins] -\u0026gt; [Available]\nSkip this step if you are using the apptest.ai Test Stage Code2 source code that uses polling instead of webhook in the next stage.\n4. Jenkins – Pipeline configuration This section demonstraters how to connect an apptest.ai Test stage to a Jenkins pipeline item. A Jenkins pipeline item is must be already created.\nPlease refer to the Example Link for more detail.\n  Go to the setup page and click on the Configure page.       On the pipeline definition page, add the apptest.ai Test Stage Code to the Script box     [apptest.ai Test Stage Code 1] – Webhook import groovy.json.JsonSlurper node { def gitRepository def androidHome def apkFile def accessKey def serviceProjectId def asyncResult def serviceUrl def serviceHost def serviceCompleteCheckUrl // Add to your Preparation Stage stage('Preparation') { // Git Repository URL Address gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git' // Android Home Path androidHome = '/opt/apps/android-sdk' echo \u0026quot;Current workspace : ${workspace}\u0026quot; accessKey = 'e40c4487b3cf5e6d53ef0543d2614488' serviceProjectId = 376 serviceHost = \u0026quot;https://api.apptest.ai\u0026quot; serviceUrl = \u0026quot;${serviceHost}/test_set/queuing?access_key=${accessKey}\u0026quot; } // Git Source Clone Stage stage('Clone source') { git branch: 'master', url: gitRepository } // Android SDK directory path Setting stage('SDK Configure') { sh \u0026quot;echo 'sdk.dir=${androidHome}' \u0026gt; local.properties\u0026quot; } // Gradle AssembleDebug Build Stage stage('Gradle Debug build') { sh \u0026quot;./gradlew :app:assembleDebug\u0026quot; } // apptest.ai Test Stage stage('Apptestai Test') { apkFile=\u0026quot;path/to/file/your_app.apk\u0026quot; hook = registerWebhook() // Call apptest.ai's Test API. // Refer to 1. API Spec r = sh(returnStdout: true, script: \u0026quot;curl -X POST -F 'apk_file=@\\\u0026quot;${apkFile}\\\u0026quot;' -F 'data={\\\u0026quot;pid\\\u0026quot;: ${serviceProjectId}, \\\u0026quot;test_set_name\\\u0026quot;: \\\u0026quot;${env.BUILD_TAG}\\\u0026quot;, \\\u0026quot;callback\\\u0026quot;: \\\u0026quot;${hook.getURL()}\\\u0026quot;}' ${serviceUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) echo \u0026quot;jsonParse Result: ${j}\u0026quot; if (j.errorCode != 0) { echo \u0026quot;apptest.ai Test cannot started. ${r}\u0026quot; r = null j = null error \u0026quot;FAIL\u0026quot; } tsid=j['data']['tsid'] echo \u0026quot;apptest.ai TestSet id : ${tsid}\u0026quot; echo \u0026quot;Waiting for POST to ${hook.getURL()}\u0026quot; // Wait for Test Complete signal waitForWebhook hook // Get the Test Result Data // Refer to 1. API Spec serviceCompleteCheckUrl = \u0026quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}\u0026quot; r = sh( returnStdout: true, script: \u0026quot;curl -X GET ${serviceCompleteCheckUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) asyncResult = j.data.result_xml echo \u0026quot;Webhook called with data: ${asyncResult}\u0026quot; } stage('Write Apptestai Test Result') { sh \u0026quot;mkdir -p tmp/\u0026quot; // Write File file:\u0026quot;tmp/TESTS-Apptestai.xml\u0026quot;, text: asyncResult, encoding: \u0026quot;UTF-8\u0026quot; sh \u0026quot;echo -n '${asyncResult}' \u0026gt; tmp/TESTS-Apptestai.xml\u0026quot; } stage('jUnit Test') { junit 'tmp/TESTS-*.xml' } } [apptest.ai Test Stage Code 2] – Polling import groovy.json.JsonSlurper node { def gitRepository def androidHome def apkFile def accessKey def serviceProjectId def testResult def serviceUrl def serviceHost def serviceCompleteCheckUrl // Add to your Preparation Stage stage('Preparation') { // Git Repository URL Address gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git' // Android Home Path androidHome = '/opt/apps/android-sdk' echo \u0026quot;Current workspace : ${workspace}\u0026quot; accessKey = 'e40c4487b3cf5e6d53ef0543d2614488' serviceProjectId = 376 serviceHost = \u0026quot;https://api.apptest.ai\u0026quot; serviceUrl = \u0026quot;${serviceHost}/test_set/queuing?access_key=${accessKey}\u0026quot; } // Git Source Clone Stage stage('Clone source') { git branch: 'master', url: gitRepository } // Android SDK directory path Setting stage('SDK Configure') { sh \u0026quot;echo 'sdk.dir=${androidHome}' \u0026gt; local.properties\u0026quot; } // Gradle AssembleDebug Build Stage stage('Gradle Debug build') { sh \u0026quot;./gradlew :app:assembleDebug\u0026quot; } // Apptest.ai Test Stage stage('apptestai Test') { apkFile=\u0026quot;path/to/file/your_app.apk\u0026quot; // Call apptest.ai\\'s Test API. r = sh(returnStdout: true, script: \u0026quot;curl -X POST -F 'apk_file=@\\\u0026quot;${apkFile}\\\u0026quot;' -F 'data={\\\u0026quot;pid\\\u0026quot;: ${serviceProjectId}, \\\u0026quot;test_set_name\\\u0026quot;: \\\u0026quot;${env.BUILD_TAG}\\\u0026quot;}' ${serviceUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) echo \u0026quot;jsonParse Result: ${j}\u0026quot; if (j.errorCode != 0) { echo \u0026quot;apptest.ai Test cannot started. ${r}\u0026quot; r = null j = null error \u0026quot;FAIL\u0026quot; } tsid=j['data']['tsid'] echo \u0026quot;Apptest.ai TestSet id : ${tsid}\u0026quot; // Get the Test Result Data // Refer to 1. API Spec serviceCompleteCheckUrl=\u0026quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}\u0026quot; r = null j = null waitUntil { sleep (time: 10, unit: \u0026quot;SECONDS\u0026quot;) r = sh( returnStdout: true, script: \u0026quot;curl -X GET ${serviceCompleteCheckUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) complete=j.complete echo \u0026quot;ci_info result : ${complete}\u0026quot; if (complete == true) { testResult=j.data.result_xml r = null j = null return true } r = null j = null return false } echo \u0026quot;test complete with data: ${testResult}\u0026quot; } stage('Write Apptestai Test Result') { sh \u0026quot;mkdir -p tmp/\u0026quot; // Write File file:\u0026quot;tmp/TESTS-Apptestai.xml\u0026quot;, text: testResult, encoding: \u0026quot;UTF-8\u0026quot; sh \u0026quot;echo -n '${testResult}' \u0026gt; tmp/TESTS-Apptestai.xml\u0026quot; } stage('jUnit Test') { junit 'tmp/TESTS-*.xml' } } You can change the following items in the above script.\n accessKey: The access key from apptest.ai serviceProjectId: The project ID created in apptest.ai  Testing is performed with preset devices within a time limit defined in the apptest.ai project configuration. Changing the settings for the Sample Test Project is not allowed, but you can change the settings in a new project.   apkFile: The app path (App Binary File) to be tested  Click “Build Now” in Jenkins to start the pipeline.   5. Test Results Once the testing is complete, the testing results in the JUnit XML result format are automatically passed onto Jenkins with a callback URL. Jenkins reflects the returned testing rsults.\nFor more detailed analysis, please visit apptest.ai\n  View Testing Results in Jenkins               View Testing Results in apptest.ai           ","excerpt":"apptest.ai Integration for Jenkins Automating Android and iOS app testing with a jenkins pipeline …","ref":"/apptest_client_docs/integrations/1_jenkins/","title":"1. Jenkins"},{"body":"apptest.ai Integration for Jenkins Automating Android and iOS app testing with a jenkins pipeline This document explains how to configure Jenkins and use our APIs to automatically run apptest.ai tests from the build phase.\nPlease refer to the link Jenkins Setup Guide for Jenkins installations\n1. Apptest.ai – Integration API POST  https://api.apptest.ai/tests_set/queuing?access_key={ACCESS_KEY}\nJSON Data parameters\n   Name Type Required / Optional Description     callback String Optional A callback URL, triggered when testing is complete   pid Integer Required The existing project ID in apptest.ai   test_set_name String Required A test name to be created in the apptest.ai project   login_id String Optional The ID of the account to enter When Testbot encounter Sign in screen.   login_pw String Optional The password of the account to enter when Testbot encounter Sign in screen,   use_vo Integer (0 or 1) Optional An option to enable / disable the AT\u0026amp;T Video Optimizer (ARO) for testing    File Parameters\n   Name Type Required / Optional Description     apk_file File Required App binary file for the app to the tested    Example Response\n{ \u0026quot;data\u0026quot;: { \u0026quot;test_count\u0026quot;: 1, // Test Count (Integer), \u0026quot;tsid\u0026quot;: 192948 // Test Set ID (Integer) }, \u0026quot;errorCode\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;ok\u0026quot; } Callback result data format\nThe testing result in the JUnit XML Format is returned using the callback URL\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;TestBot Test.Apk File Name (with Version)\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 1\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 2\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;apptest.ai Result Page Link\u0026quot;\u0026gt;\u0026lt;/error\u0026gt; \u0026lt;/testcase\u0026gt; ... \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt; GET  https://api.apptest.ai/tests_set/{tsid}/ci_info?access_key=ACCESS_KEY\nResponse { \u0026quot;complete\u0026quot;: true, \u0026quot;data\u0026quot;: { \u0026quot;result_xml\u0026quot;: \u0026quot;\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;TestBot Test.Apk File Name (with Version)\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 1\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 2\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;Apptes.ai Result Page Link\u0026quot;\u0026gt;\u0026lt;/error\u0026gt; \u0026lt;/testcase\u0026gt; ... \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt;\u0026quot; }, \u0026quot;errorCode\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;ok\u0026quot; } 2. apptest.ai – Access Key and Project ID To integrate apptest.ai into a Jenkins pipline, an access key and a project ID are required.\n  How to find the access key: An access key is automatically issued when you sign up with apptest.ai. You can locate it in the apptest.ai profile page       How to find the project ID: A project ID is assigned when you create a testing project       By default, a Sample Test Project Page is created automatically once you sign in.\nChanging the settings in the Sample Test Project is not supported. However, you can change the settings for your new projects.\n3. Jenkins – Webhook Step Plugin Installation Search and install the “Webhook step” Plugin in the Jenkins dashboard: [Manage Jenkins] -\u0026gt; [Manage Plugins] -\u0026gt; [Available]\nSkip this step if you are using the apptest.ai Test Stage Code2 source code that uses polling instead of webhook in the next stage.\n4. Jenkins – Pipeline configuration This section demonstraters how to connect an apptest.ai Test stage to a Jenkins pipeline item. A Jenkins pipeline item is must be already created.\nPlease refer to the Example Link for more detail.\n  Go to the setup page and click on the Configure page.       On the pipeline definition page, add the apptest.ai Test Stage Code to the Script box     [apptest.ai Test Stage Code 1] – Webhook import groovy.json.JsonSlurper node { def gitRepository def androidHome def apkFile def accessKey def serviceProjectId def asyncResult def serviceUrl def serviceHost def serviceCompleteCheckUrl // Add to your Preparation Stage stage('Preparation') { // Git Repository URL Address gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git' // Android Home Path androidHome = '/opt/apps/android-sdk' echo \u0026quot;Current workspace : ${workspace}\u0026quot; accessKey = 'e40c4487b3cf5e6d53ef0543d2614488' serviceProjectId = 376 serviceHost = \u0026quot;https://api.apptest.ai\u0026quot; serviceUrl = \u0026quot;${serviceHost}/test_set/queuing?access_key=${accessKey}\u0026quot; } // Git Source Clone Stage stage('Clone source') { git branch: 'master', url: gitRepository } // Android SDK directory path Setting stage('SDK Configure') { sh \u0026quot;echo 'sdk.dir=${androidHome}' \u0026gt; local.properties\u0026quot; } // Gradle AssembleDebug Build Stage stage('Gradle Debug build') { sh \u0026quot;./gradlew :app:assembleDebug\u0026quot; } // apptest.ai Test Stage stage('Apptestai Test') { apkFile=\u0026quot;path/to/file/your_app.apk\u0026quot; hook = registerWebhook() // Call apptest.ai's Test API. // Refer to 1. API Spec r = sh(returnStdout: true, script: \u0026quot;curl -X POST -F 'apk_file=@\\\u0026quot;${apkFile}\\\u0026quot;' -F 'data={\\\u0026quot;pid\\\u0026quot;: ${serviceProjectId}, \\\u0026quot;test_set_name\\\u0026quot;: \\\u0026quot;${env.BUILD_TAG}\\\u0026quot;, \\\u0026quot;callback\\\u0026quot;: \\\u0026quot;${hook.getURL()}\\\u0026quot;}' ${serviceUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) echo \u0026quot;jsonParse Result: ${j}\u0026quot; if (j.errorCode != 0) { echo \u0026quot;apptest.ai Test cannot started. ${r}\u0026quot; r = null j = null error \u0026quot;FAIL\u0026quot; } tsid=j['data']['tsid'] echo \u0026quot;apptest.ai TestSet id : ${tsid}\u0026quot; echo \u0026quot;Waiting for POST to ${hook.getURL()}\u0026quot; // Wait for Test Complete signal waitForWebhook hook // Get the Test Result Data // Refer to 1. API Spec serviceCompleteCheckUrl = \u0026quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}\u0026quot; r = sh( returnStdout: true, script: \u0026quot;curl -X GET ${serviceCompleteCheckUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) asyncResult = j.data.result_xml echo \u0026quot;Webhook called with data: ${asyncResult}\u0026quot; } stage('Write Apptestai Test Result') { sh \u0026quot;mkdir -p tmp/\u0026quot; // Write File file:\u0026quot;tmp/TESTS-Apptestai.xml\u0026quot;, text: asyncResult, encoding: \u0026quot;UTF-8\u0026quot; sh \u0026quot;echo -n '${asyncResult}' \u0026gt; tmp/TESTS-Apptestai.xml\u0026quot; } stage('jUnit Test') { junit 'tmp/TESTS-*.xml' } } [apptest.ai Test Stage Code 2] – Polling import groovy.json.JsonSlurper node { def gitRepository def androidHome def apkFile def accessKey def serviceProjectId def testResult def serviceUrl def serviceHost def serviceCompleteCheckUrl // Add to your Preparation Stage stage('Preparation') { // Git Repository URL Address gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git' // Android Home Path androidHome = '/opt/apps/android-sdk' echo \u0026quot;Current workspace : ${workspace}\u0026quot; accessKey = 'e40c4487b3cf5e6d53ef0543d2614488' serviceProjectId = 376 serviceHost = \u0026quot;https://api.apptest.ai\u0026quot; serviceUrl = \u0026quot;${serviceHost}/test_set/queuing?access_key=${accessKey}\u0026quot; } // Git Source Clone Stage stage('Clone source') { git branch: 'master', url: gitRepository } // Android SDK directory path Setting stage('SDK Configure') { sh \u0026quot;echo 'sdk.dir=${androidHome}' \u0026gt; local.properties\u0026quot; } // Gradle AssembleDebug Build Stage stage('Gradle Debug build') { sh \u0026quot;./gradlew :app:assembleDebug\u0026quot; } // Apptest.ai Test Stage stage('apptestai Test') { apkFile=\u0026quot;path/to/file/your_app.apk\u0026quot; // Call apptest.ai\\'s Test API. r = sh(returnStdout: true, script: \u0026quot;curl -X POST -F 'apk_file=@\\\u0026quot;${apkFile}\\\u0026quot;' -F 'data={\\\u0026quot;pid\\\u0026quot;: ${serviceProjectId}, \\\u0026quot;test_set_name\\\u0026quot;: \\\u0026quot;${env.BUILD_TAG}\\\u0026quot;}' ${serviceUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) echo \u0026quot;jsonParse Result: ${j}\u0026quot; if (j.errorCode != 0) { echo \u0026quot;apptest.ai Test cannot started. ${r}\u0026quot; r = null j = null error \u0026quot;FAIL\u0026quot; } tsid=j['data']['tsid'] echo \u0026quot;Apptest.ai TestSet id : ${tsid}\u0026quot; // Get the Test Result Data // Refer to 1. API Spec serviceCompleteCheckUrl=\u0026quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}\u0026quot; r = null j = null waitUntil { sleep (time: 10, unit: \u0026quot;SECONDS\u0026quot;) r = sh( returnStdout: true, script: \u0026quot;curl -X GET ${serviceCompleteCheckUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) complete=j.complete echo \u0026quot;ci_info result : ${complete}\u0026quot; if (complete == true) { testResult=j.data.result_xml r = null j = null return true } r = null j = null return false } echo \u0026quot;test complete with data: ${testResult}\u0026quot; } stage('Write Apptestai Test Result') { sh \u0026quot;mkdir -p tmp/\u0026quot; // Write File file:\u0026quot;tmp/TESTS-Apptestai.xml\u0026quot;, text: testResult, encoding: \u0026quot;UTF-8\u0026quot; sh \u0026quot;echo -n '${testResult}' \u0026gt; tmp/TESTS-Apptestai.xml\u0026quot; } stage('jUnit Test') { junit 'tmp/TESTS-*.xml' } } You can change the following items in the above script.\n accessKey: The access key from apptest.ai serviceProjectId: The project ID created in apptest.ai  Testing is performed with preset devices within a time limit defined in the apptest.ai project configuration. Changing the settings for the Sample Test Project is not allowed, but you can change the settings in a new project.   apkFile: The app path (App Binary File) to be tested  Click “Build Now” in Jenkins to start the pipeline.   5. Test Results Once the testing is complete, the testing results in the JUnit XML result format are automatically passed onto Jenkins with a callback URL. Jenkins reflects the returned testing rsults.\nFor more detailed analysis, please visit apptest.ai\n  View Testing Results in Jenkins               View Testing Results in apptest.ai           ","excerpt":"apptest.ai Integration for Jenkins Automating Android and iOS app testing with a jenkins pipeline …","ref":"/apptest_client_docs/ko/docs/integrations/1_jenkins/","title":"1. Jenkins"},{"body":"apptest.ai Integration for Travis CI With just a few lines of script, you can enable apptest.ai along with Travis CI for out testbot to explore your apps and report results for every build process.\nTo use the apptest.ai service within Travis CI pipeline, you can take the following two steps: 1. Register the apptest.ai Access Key, and 2. add the apptest.ai to your build script (travis.yml)\nAdding apptest.ai access key onto the build environment   Copy the access key string from the apptest.ai service profile page     Add apptest.ai access key to the build envirronment variable named APPTEST_AI_ACCESS_KEY and add the encryprion to the build script\n  $ travis login $ travis encrypt APPTEST_AI_ACCESS_KEY=\u0026quot;ID:Acess Key\u0026quot; --add  The format for the access key becomes “apptest.ai ID: apptest.ai Access Key“. For example, if the ID is jean@apptest.ai and the access key is “ab8f3e321d631c84c9b1113”, the following applies:\n jean@apptest.ai:ab8f3e321d631c84c9b1113 After this command, the following “env:” section is added to the existing build script file. This section is replaced by the APPTEST_AI_ACCESS_KEY environment variable declaration at run time.\nenv: global: - secure: fUnmuuqKmxWjxGHbfTB7QZgSmkB7yvt6KGAn8dCs1j4GneWbSIrEhghRrlOMQCThhMoetou4H+NaWeTXRRa4fpoCGm1U51RbD+J4DrbKWj3MzRupzByEAsaWhmvCaYVgCOlkYgaApcvujIrpw1rUTQVio8+WoYIXgXx3B  Now, add a script that executes the following after cloning the CI Tool integration script set by apptest.ai as follows.  - git clone https://github.com/apptestai/ci_addon - export binary_path=HackerNews.ipa - export project_id='825' - bash ./ci_addon/step.sh  At least two arguments, binary_path and project_id, are required to invoke the service. binary_path is the path to the binary you want to test, i.e. * .apk files for android and * .ipa files for iOS. project_id is the Project ID for apptest.ai that contains the settings such as test time and device list for testing. The Project ID of apptest.ai can be found on the project information page as shown below.\n   If you don’t want to download apptest.ai’s CI integration script every time, include apptest.ai’s ci_addon repository in the Project Repository in advance.\n  Once you commit the build script, Travis CI will execute. When running apptest.ai script, the test is executed as shown below and the result is printed on the console.     The test results are stored in test-results/apptest-ai_result.html with detailed HTML report and an XML document in JUnit Test result format in test-results /apptestai/result.xml. You can save this file externally using various deploy functions provided by Travis CI. Below is an example of a release on Github. You can see the apptest.ai test report posted on Github’s release page.      If you want to change the location of the folder to store results, declare and pass test_result_path environment variable. If you want to execute the next build without waiting for the test to finish, declare waiting_for_test_results environment variable and pass FALSE.\n Finally, here’s the .travis.yml example. First, for Android, in the “env” section, you can see that there are two secure environment variables for storing apptest.ai access key and two secure environment variables for Github acess key to deploy.\n For an iOS case, iOS needs two more registered environment variables. This is an environment variable for code sign which is required when creating binary on iOS. Below we used a Fastlane match for the code sign. Fastlane match encrypts the certificate file and provisioning file required for code signing on Github, so two more access tokens and decryption keys are added to access a private GitHub repository where the certificate is stored compared to Android.\n ","excerpt":"apptest.ai Integration for Travis CI With just a few lines of script, you can enable apptest.ai …","ref":"/apptest_client_docs/integrations/2_travisci/","title":"2. Travis CI"},{"body":"apptest.ai Integration for Travis CI With just a few lines of script, you can enable apptest.ai along with Travis CI for out testbot to explore your apps and report results for every build process.\nTo use the apptest.ai service within Travis CI pipeline, you can take the following two steps: 1. Register the apptest.ai Access Key, and 2. add the apptest.ai to your build script (travis.yml)\nAdding apptest.ai access key onto the build environment   Copy the access key string from the apptest.ai service profile page     Add apptest.ai access key to the build envirronment variable named APPTEST_AI_ACCESS_KEY and add the encryprion to the build script\n  $ travis login $ travis encrypt APPTEST_AI_ACCESS_KEY=\u0026quot;ID:Acess Key\u0026quot; --add  The format for the access key becomes “apptest.ai ID: apptest.ai Access Key“. For example, if the ID is jean@apptest.ai and the access key is “ab8f3e321d631c84c9b1113”, the following applies:\n jean@apptest.ai:ab8f3e321d631c84c9b1113 After this command, the following “env:” section is added to the existing build script file. This section is replaced by the APPTEST_AI_ACCESS_KEY environment variable declaration at run time.\nenv: global: - secure: fUnmuuqKmxWjxGHbfTB7QZgSmkB7yvt6KGAn8dCs1j4GneWbSIrEhghRrlOMQCThhMoetou4H+NaWeTXRRa4fpoCGm1U51RbD+J4DrbKWj3MzRupzByEAsaWhmvCaYVgCOlkYgaApcvujIrpw1rUTQVio8+WoYIXgXx3B  Now, add a script that executes the following after cloning the CI Tool integration script set by apptest.ai as follows.  - git clone https://github.com/apptestai/ci_addon - export binary_path=HackerNews.ipa - export project_id='825' - bash ./ci_addon/step.sh  At least two arguments, binary_path and project_id, are required to invoke the service. binary_path is the path to the binary you want to test, i.e. * .apk files for android and * .ipa files for iOS. project_id is the Project ID for apptest.ai that contains the settings such as test time and device list for testing. The Project ID of apptest.ai can be found on the project information page as shown below.\n   If you don’t want to download apptest.ai’s CI integration script every time, include apptest.ai’s ci_addon repository in the Project Repository in advance.\n  Once you commit the build script, Travis CI will execute. When running apptest.ai script, the test is executed as shown below and the result is printed on the console.     The test results are stored in test-results/apptest-ai_result.html with detailed HTML report and an XML document in JUnit Test result format in test-results /apptestai/result.xml. You can save this file externally using various deploy functions provided by Travis CI. Below is an example of a release on Github. You can see the apptest.ai test report posted on Github’s release page.      If you want to change the location of the folder to store results, declare and pass test_result_path environment variable. If you want to execute the next build without waiting for the test to finish, declare waiting_for_test_results environment variable and pass FALSE.\n Finally, here’s the .travis.yml example. First, for Android, in the “env” section, you can see that there are two secure environment variables for storing apptest.ai access key and two secure environment variables for Github acess key to deploy.\n For an iOS case, iOS needs two more registered environment variables. This is an environment variable for code sign which is required when creating binary on iOS. Below we used a Fastlane match for the code sign. Fastlane match encrypts the certificate file and provisioning file required for code signing on Github, so two more access tokens and decryption keys are added to access a private GitHub repository where the certificate is stored compared to Android.\n ","excerpt":"apptest.ai Integration for Travis CI With just a few lines of script, you can enable apptest.ai …","ref":"/apptest_client_docs/ko/docs/integrations/2_travisci/","title":"2. Travis CI"},{"body":"apptest.ai Integration for Circle CI Starting with CircleCI version 2.1, the build script sharing method called orb allows you to have Testbot test your app and report the results in every build with just a few lines of scripts.\nTo enable the apptest.ai service during a build in CircleCI: 1. Register the apptest.ai access key in the build environment variable.\nAdding apptest.ai access key onto the build environment   Copy the access key string from the apptest.ai service profile page     Connect to CircleCI and click the Setting icon to the right of the build project name to go to the build configuration page.     From the Setup page, select Environment variables menu and click Add Variables button to create the variable APPTEST_AI_ACCESS_KEY.     Enter the value of the variable as “apptest.ai ID: apptest.ai Access Key”. For example, if the ID is jean@apptest.ai and the access key is “ab8f3e321d631c84c9b1113”. Register one as follows.\njean@apptest.ai:ab8f3e321d631c84c9b1113 The following is the normal registration and access_key is masked and printed.\nAdding apptest.ai test step to the build  Include apptest.ai Orb  If the app you want to test is in Android, include android-app-test orb as shown below.\norbs: apptest-ai: apptestai/android-app-test@volatile To test your iOS App, include ios-app-test orb as shown below.\norbs: apptest-ai: apptestai/ios-app-test@volatile Adding apptest.ai test build step  You can add apptest-ai test steps anywhere in your build workflow.\n- apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818'  At least two arguments, binary_path and project_id, are required to invoke the service. binary_path is the path to the binary you want to test: * .apk files for android and * .ipa files for iOS. project_id is the ID for apptest.ai that contains the settings such as test time and device list for testing. The Project ID of apptest.ai can be found on the Project Information page as shown below.\n   Execute the build  The apptest-ai/run-test step sends a request to test with apptest.ai and after the test is complete, prints the test result to the console as shown below.    If you want to move on to the next build step without waiting for the apptest.ai test result, you can set FALSE to the waiting_for_test_results argument as shown below.\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818' waiting_for_test_results: 'false' (Optional) Storing test result  apptest.ai test result printed in the console is saved under “test-results” directory by default. To include the test results in the Test Summary provided by CircleCI, add the store-test-results step provided by CircleCI and specify the test result path of apptest.ai as shown below.\n- store_test_results: path: test-results If you add the store-test result step, CircleCI analyzes the test result of apptest.ai along with other test results in the Test Summary tab as below.   (Optional) Storing test result  Because Test Summary only provides very limited pass/fail information, apptest.ai provides a more detailed test result report in a separate HTML format. To save this report in the Artifact section of CircleCI, add the store_artifacts step provided by CircleCI as below and specify the path where test results of apptest.ai are saved.\n- store_artifacts: path: test-results Saved test report is inquired as below in Artifacts tab in CircleCI.   If you click this html file, you can see the detailed report as below.    If you want to change the directory that stores the test results, you can pass the path to the test_result_path argument when you run the apptest.ai test step as below.\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818' test_result_path: app/build/outputs/apk/debug Finally, here’s the sample the final .circleci / config.yml file. Below is for Android.\n And iOS:\n ","excerpt":"apptest.ai Integration for Circle CI Starting with CircleCI version 2.1, the build script sharing …","ref":"/apptest_client_docs/integrations/3_circleci/","title":"3. Circle CI"},{"body":"apptest.ai Integration for Circle CI Starting with CircleCI version 2.1, the build script sharing method called orb allows you to have Testbot test your app and report the results in every build with just a few lines of scripts.\nTo enable the apptest.ai service during a build in CircleCI: 1. Register the apptest.ai access key in the build environment variable.\nAdding apptest.ai access key onto the build environment   Copy the access key string from the apptest.ai service profile page     Connect to CircleCI and click the Setting icon to the right of the build project name to go to the build configuration page.     From the Setup page, select Environment variables menu and click Add Variables button to create the variable APPTEST_AI_ACCESS_KEY.     Enter the value of the variable as “apptest.ai ID: apptest.ai Access Key”. For example, if the ID is jean@apptest.ai and the access key is “ab8f3e321d631c84c9b1113”. Register one as follows.\njean@apptest.ai:ab8f3e321d631c84c9b1113 The following is the normal registration and access_key is masked and printed.\nAdding apptest.ai test step to the build  Include apptest.ai Orb  If the app you want to test is in Android, include android-app-test orb as shown below.\norbs: apptest-ai: apptestai/android-app-test@volatile To test your iOS App, include ios-app-test orb as shown below.\norbs: apptest-ai: apptestai/ios-app-test@volatile Adding apptest.ai test build step  You can add apptest-ai test steps anywhere in your build workflow.\n- apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818'  At least two arguments, binary_path and project_id, are required to invoke the service. binary_path is the path to the binary you want to test: * .apk files for android and * .ipa files for iOS. project_id is the ID for apptest.ai that contains the settings such as test time and device list for testing. The Project ID of apptest.ai can be found on the Project Information page as shown below.\n   Execute the build  The apptest-ai/run-test step sends a request to test with apptest.ai and after the test is complete, prints the test result to the console as shown below.    If you want to move on to the next build step without waiting for the apptest.ai test result, you can set FALSE to the waiting_for_test_results argument as shown below.\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818' waiting_for_test_results: 'false' (Optional) Storing test result  apptest.ai test result printed in the console is saved under “test-results” directory by default. To include the test results in the Test Summary provided by CircleCI, add the store-test-results step provided by CircleCI and specify the test result path of apptest.ai as shown below.\n- store_test_results: path: test-results If you add the store-test result step, CircleCI analyzes the test result of apptest.ai along with other test results in the Test Summary tab as below.   (Optional) Storing test result  Because Test Summary only provides very limited pass/fail information, apptest.ai provides a more detailed test result report in a separate HTML format. To save this report in the Artifact section of CircleCI, add the store_artifacts step provided by CircleCI as below and specify the path where test results of apptest.ai are saved.\n- store_artifacts: path: test-results Saved test report is inquired as below in Artifacts tab in CircleCI.   If you click this html file, you can see the detailed report as below.    If you want to change the directory that stores the test results, you can pass the path to the test_result_path argument when you run the apptest.ai test step as below.\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818' test_result_path: app/build/outputs/apk/debug Finally, here’s the sample the final .circleci / config.yml file. Below is for Android.\n And iOS:\n ","excerpt":"apptest.ai Integration for Circle CI Starting with CircleCI version 2.1, the build script sharing …","ref":"/apptest_client_docs/ko/docs/integrations/3_circleci/","title":"3. Circle CI"},{"body":"Using apptest.ai with Circle CI on SauceLabs We have a tutorial on how to use the apptest.ai service on CircleCI to perform a daily build which is running a smoke test without writing a single line of code. This time, I will introduce how to test the same using a device provided by Sauce Labs, not a device provided by apptest.ai.\nThe only change from the way the CircleCI used the appTest.ai service is to use Sauce Labs API Keys instead of apptest.ai’s access keys, and to associate the apptest.ai and Sauce Labs accounts. If you are interested in linking your apptest.ai and Sauce Labs accounts during the current Beta period, please send an email to contact@apptest.ai\n  Access to Sauce Labs service as below and obtain your API key     Register the APPTEST_AI_ACCESS_KEY in CircleCI using Sauce Labs API the same way that your previously registered the apptest.ai access key in CircleCI     Add Sauce Labs-based apptest.ai Test Step orb to CircleCI’s build configuration file (circleci/config,yml). The same is true except that orb has been renamed from apptestai/android-app-test to apptestai/android-app-test-saucelabs. In other words, include orb as below:\n  orbs: apptest-ai: apptestai/android-app-test-saucelabs@dev:0.1.9 Add apptest.ai test step to start testing as below\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk When you build, you can test with the device registered in your Sauce Labs account as below, and the result is saved in the Artifacts tab in CircleCI. More detailed test data including device log can be accessed by accessing Sauce Labs.     Test on LG G5 provided by Sauce Labs has been successfully completed   The test summary of CircleCI also demonstrates the result the testbot   You can find the test report saved in HTML from in CircleCI Artifacts.   You can open this HTML to see the detailed test results   Connect to Sauce Labs to see the details of the LG G5 report used in the test   Sauce Labs can view the screen shots collected during the tests requested by CircleCI   In Sauce Labs, you can search the detailed device log collected during the test on the CircleCI\nFinally, the full build script used by CircleCI shown in this demo is shown below.  ","excerpt":"Using apptest.ai with Circle CI on SauceLabs We have a tutorial on how to use the apptest.ai service …","ref":"/apptest_client_docs/integrations/4_circleciwithsaucelabs/","title":"4. Circle CI with Saucelabs"},{"body":"Using apptest.ai with Circle CI on SauceLabs We have a tutorial on how to use the apptest.ai service on CircleCI to perform a daily build which is running a smoke test without writing a single line of code. This time, I will introduce how to test the same using a device provided by Sauce Labs, not a device provided by apptest.ai.\nThe only change from the way the CircleCI used the appTest.ai service is to use Sauce Labs API Keys instead of apptest.ai’s access keys, and to associate the apptest.ai and Sauce Labs accounts. If you are interested in linking your apptest.ai and Sauce Labs accounts during the current Beta period, please send an email to contact@apptest.ai\n  Access to Sauce Labs service as below and obtain your API key     Register the APPTEST_AI_ACCESS_KEY in CircleCI using Sauce Labs API the same way that your previously registered the apptest.ai access key in CircleCI     Add Sauce Labs-based apptest.ai Test Step orb to CircleCI’s build configuration file (circleci/config,yml). The same is true except that orb has been renamed from apptestai/android-app-test to apptestai/android-app-test-saucelabs. In other words, include orb as below:\n  orbs: apptest-ai: apptestai/android-app-test-saucelabs@dev:0.1.9 Add apptest.ai test step to start testing as below\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk When you build, you can test with the device registered in your Sauce Labs account as below, and the result is saved in the Artifacts tab in CircleCI. More detailed test data including device log can be accessed by accessing Sauce Labs.     Test on LG G5 provided by Sauce Labs has been successfully completed   The test summary of CircleCI also demonstrates the result the testbot   You can find the test report saved in HTML from in CircleCI Artifacts.   You can open this HTML to see the detailed test results   Connect to Sauce Labs to see the details of the LG G5 report used in the test   Sauce Labs can view the screen shots collected during the tests requested by CircleCI   In Sauce Labs, you can search the detailed device log collected during the test on the CircleCI\nFinally, the full build script used by CircleCI shown in this demo is shown below.  ","excerpt":"Using apptest.ai with Circle CI on SauceLabs We have a tutorial on how to use the apptest.ai service …","ref":"/apptest_client_docs/ko/docs/integrations/4_circleciwithsaucelabs/","title":"4. Circle CI with Saucelabs"},{"body":"","excerpt":"","ref":"/apptest_client_docs/integrations/","title":"CI/CD Integration Document"},{"body":"","excerpt":"","ref":"/apptest_client_docs/ko/docs/integrations/","title":"CI/CD Integration Document"},{"body":"Integrating REST APIs into CI / CD pipelines This is API information provided to use apptest.ai in connection with CI(Continuous Integration) tools. You can use apptest.ai through test set creation, test status view, and test result view API.\n1. [POST] Run New Testset Run a New Testset. (Testset is group of unit Tests) Some Options of the new test run follow the configuration information stored in the project.\n[Request]\nPOST /openapi/v2/testset Host : HTTPS://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request Body Miltipary Form Data #1\n   key type Description Required     app_file File Target APP File to Test Reqiored    Request Body Miltipary Form Data #2\n   key  type  Description Required     pid  Positive Number - Project ID  ex) 509 Required   testset_name  String Max 100 Characters Name of testset  ex) \u0026ldquo;Testset name Example#1\u0026rdquo; Required   time_limmit  Positive Number Min : 5 Max : 30 Test time limit (Minutes) ex) 5 If the value is empty, it follows the time-limit saved in the project settings. Required   use_vo  Boolean Default: false Whether AT\u0026amp;T Video Optimizer(ARO) is used (true or false ) ex) true Required   callback  String Max 250 Characters Callback URL to be called after test completion. ex) \u0026lsquo;https://127.0.0.1/callback/url/example\u0026rsquo; Required   credentials login_id String Max 150 Characters ID of the test account required to test the app. (Test credentials info - Login ID) ex) \u0026lsquo;credentials_id\u0026rsquo; Required    login_pw String Max 150 Characters Password of the test account required to test the app. (Test credentials info - Login PW) ex) \u0026lsquo;credentials_pw\u0026rsquo; Required    [ Request Example ]\ncurl --request POST \\ --user {user_id}:{access_key} \\ -F 'app_file=@/path/of/your/app_file' \\ -F 'data={\\ \u0026quot;pid\u0026quot;: 509, \\ \u0026quot;testset_name\u0026quot;: \u0026quot;Testset Name Example #1\u0026quot;, \\ \u0026quot;time_limit\u0026quot;: 5, \\ \u0026quot;use_vo\u0026quot;: false, \\ \u0026quot;credentials\u0026quot;: { \\ \u0026quot;login_id\u0026quot;: \u0026quot;credentials_id\u0026quot;, \\ \u0026quot;login_pw\u0026quot;: \u0026quot;credentials_pw\u0026quot; \\ } \\ }' https://api.apptest.ai/openapi/v2/testset [ Response ]\n   key  type  Description Required     pid  Positive Number - Project ID  ex) 509 Required   testset_name  String Max 100 Characters Name of testset  ex) \u0026ldquo;Testset name Example#1\u0026rdquo; Required   time_limmit  Positive Number Min : 5 Max : 30 Test time limit (Minutes) ex) 5 If the value is empty, it follows the time-limit saved in the project settings. Required   use_vo  Boolean Default: false Whether AT\u0026amp;T Video Optimizer(ARO) is used (true or false ) ex) true Required   callback  String Max 250 Characters Callback URL to be called after test completion. ex) \u0026lsquo;https://127.0.0.1/callback/url/example\u0026rsquo; Required   credentials login_id String Max 150 Characters ID of the test account required to test the app. (Test credentials info - Login ID) ex) \u0026lsquo;credentials_id\u0026rsquo; Required    login_pw String Max 150 Characters Password of the test account required to test the app. (Test credentials info - Login PW) ex) \u0026lsquo;credentials_pw\u0026rsquo; Required    [ Response Example ]\n{ \u0026quot;data\u0026quot;: { \u0026quot;test_count\u0026quot;: 1, \u0026quot;testset_id\u0026quot;: 251929 }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ Error Code ]\n   result_code result_msg reason     4000 Missing Request Parameter The required parameter was not found in the request parameters : {{ PARAMETER KEY }}   4030 App File Analysis Failed iOS plistlib Parsing Error : {{ PARSING ERROR MSG }}   4031  Test creation failed : There was a problem pre-processing your app file. \\n The IPA file must be a development version that is signed by your development certificate.   4032  Test creation failed. Invalid app file. \\n There was a problem pre-processing your app file.   4040  Android Manifest Parsing Error : {{ PARSING ERROR MSG }}   4041  No launchable activity found. (android.intent.category.LAUNCHER)   4050 Invalid Request Parameter File extension not supported. ( Support : ipa, zip, app, apk, xapk, apks )   4051  The required parameter was not found in the request parameters : (app_file)   4052  Invalid request parameter : (project_id: {{ PROJECT_ID }})   4053  Invalid request parameter : (testset_id: {{ TESTSET_ID }})   4055  Device is not compatible with this app : ( APP os type : {{ APP_OS_TYPE }} )   4080 Invalid Request Parameter Device info does not exist in prese project data.   4081  Available devices does not exist in preset project data.   5001 Run New Testset Error Global Exception Error - {{ ERROR_MSG }}   6001 App File Upload Error App file upload fail.   8000 System Maintenance The service is currently under system maintenance.    2. [ GET ] Testset Status Check the progress of the testset\n[ Request ]\nGET /openapi/v2/testset/{testset_id} Host : https://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request URL Parameter\n   Key Type Description Required     testset_id Positive number Testset ID Required    [ Request Example ]\ncurl --request POST \\ --user {user_id}:{access_key} \\ https://api.apptest.ai/openapi/v2/testset/55716 [ Response ]\nResponse Body Data Type : JSON\n   Key  Type Description     testset_status  String Testset Status ( Complete or Running )   testset_status_detail  JSON Count of the result for each tests.    total_test_cnt Positive number Total test counts    error_cnt Positive number Error detected test counts    fail_cnt Positive number Failed test counts    initializing_cnt Positive number Initializing test counts    pass_cnt Positive number passed test counts    running_cnt Positive number Running test counts    stop_cnt Positive number stopped test counts    response_time Datetime Response time (timezome : UTC)    [Response Example ]\n{ \u0026quot;data\u0026quot;: { 'testset_status': 'Complete', 'testset_status_detail': { 'total_test_cnt': 3, 'error_cnt': 1, 'fail_cnt': 1, 'initializing_cnt': 0, 'running_cnt': 1, 'stop_cnt': 0, 'pass_cnt': 0 } }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ Error Code ]\nresult_code\tresult_msg\treason 5002\tGet Testset Status Error\tGlobal Exception Error – {ERROR_MSG} 8000\tSystem Maintenance\tThe Service is currently under system maintenance. HTTP STATUS CODE 400\tBad Request 401\tUnauthorized 200\tOK\n3. [ GET ] Testset Result This API that can be called only when the test is completed. Returns the result data of the testset.\n[ Request ]\nGET /openapi/v2/testset/{testset_id}/result Host : https://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request URL Parameter\nKey\tType\tDescription\tRequired testset_id\tPositive number\tTestset ID\tRequired\n[ Request Example ]\ncurl --request POST \\ --user {user_id}:{access_key} \\ https://api.apptest.ai/openapi/v2/testset/55716/result [ Response ]\nResponse Body Data Type : JSON\n   Key Type Description     complete Boolean Whether the test is running or completed ( true or false)   result_xml Boolean Result data in XML format in JUnit format   result_html Boolean Result data in HTML format   result_json Boolean Result data in JSON format in JUnit format    [ Response Example ]\n{ \u0026quot;data\u0026quot;: { \u0026quot;complete\u0026quot;: true, \u0026quot;result_html\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result_xml\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result_json\u0026quot;: \u0026quot;\u0026quot;, }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ JUnit XML Format ]\n   Key\tType\tDescription       complete Boolean Whether the test is running or completed (true   result_xml String Result data in XML format in JUnit format   result_html String Result data in HTML format   result_json String Result data in JSON format in JUnit format    [ JUnit XML Format Example ]\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;{PROJECT NAME}.TestBot\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;{DEVICE NAME}\u0026quot; time=\u0026quot;{TEST TIME SECONDS}\u0026quot;\u0026gt; \u0026lt;system-out\u0026gt;{RESULT PAGE LINK URL}\u0026lt;/system-out\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;{DEVICE NAME}\u0026quot; time=\u0026quot;{TEST TIME SECONDS}\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;{RESULT PAGE LINK URL}\u0026quot; /\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt; [ Error Code ]\n   result_code result_msg reason     5003 Get Testset Result Data Error Global Exception Error – {ERROR_MSG}   6002 Get Testset Result Data Failed Test is running yet. Please request when the test is complete.   6003 Data Does Not Exist Test data does not exist.   8000 System Maintenance The Service is currently under system maintenance.       HTTP STATUS CODE     400 Bad Request   401 Unauthorized   200 OK    Appendix. API Result Codes    result_code result_msg reason     4000 Missing Request Parameter The required parameter was not found in the request parameters : ({PARAMETER KEY})   4030 App File Analysis Failed iOS plistlib Parsing Error : {PARSING ERROR MSG}   4031 App File Analysis Failed Test creation failed : There was a problem pre-processing your app file. \\n the IPA file must be a development version that is signed by your development certificate.   4032 App File Analysis Failed Test creation failed : Invalid app file. \\n There was a problem pre-processing your app file.   4040 App File Analysis Failed Android Manifest Parsing Error : {PARSING ERROR MSG}   4041 App File Analysis Failed No launchable activity found. (android.intent.category.LAUNCHER)   4050 Invalid Request Parameter File extension not supported. (support : ipa, zip, app, apk, xapk, apks)   4051 Invalid Request Parameter The required parameter was not found in the request parameters: (app_file)   4052 Invalid Request Parameter Invalid request parameter : (project_id : {PROJECT_ID})   4053 Invalid Request Parameter Invalid request parameter : (testset_id : {TESTSET_ID})   4055 Invalid Request Parameter Device is not compatible with this app : (App os type : {APP_OS_TYPE})   4080 Invalid Request Parameter Device info does not exist in preset project data.   4081 Invalid Request Parameter Available devices does not exist in preset project data.   5001 Run New Testset Error Global Exception Error – {ERROR_MSG}   5002 Get Testset Status Error Global Exception Error – {ERROR_MSG}   5003 Get Testset Result Data Error Global Exception Error – {ERROR_MSG}   6001 App File Upload Error App file upload fail.   6002 Get Testset Result Data Failed Test is running yet. Please request when the test is complete.   6003 Data Does Not Exist Test data does not exist.   8000 System Maintenance The Service is currently under system maintenance.    ","excerpt":"Integrating REST APIs into CI / CD pipelines This is API information provided to use apptest.ai in …","ref":"/apptest_client_docs/restapi/","title":"Rest APIs for CI/CD"},{"body":"Integrating REST APIs into CI / CD pipelines This is API information provided to use apptest.ai in connection with CI(Continuous Integration) tools. You can use apptest.ai through test set creation, test status view, and test result view API.\n1. [POST] Run New Testset Run a New Testset. (Testset is group of unit Tests) Some Options of the new test run follow the configuration information stored in the project.\n[Request]\nPOST /openapi/v2/testset Host : HTTPS://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request Body Miltipary Form Data #1\n   key type Description Required     app_file File Target APP File to Test Reqiored    Request Body Miltipary Form Data #2\n   key  type  Description Required     pid  Positive Number - Project ID  ex) 509 Required   testset_name  String Max 100 Characters Name of testset  ex) \u0026ldquo;Testset name Example#1\u0026rdquo; Required   time_limmit  Positive Number Min : 5 Max : 30 Test time limit (Minutes) ex) 5 If the value is empty, it follows the time-limit saved in the project settings. Required   use_vo  Boolean Default: false Whether AT\u0026amp;T Video Optimizer(ARO) is used (true or false ) ex) true Required   callback  String Max 250 Characters Callback URL to be called after test completion. ex) \u0026lsquo;https://127.0.0.1/callback/url/example\u0026rsquo; Required   credentials login_id String Max 150 Characters ID of the test account required to test the app. (Test credentials info - Login ID) ex) \u0026lsquo;credentials_id\u0026rsquo; Required    login_pw String Max 150 Characters Password of the test account required to test the app. (Test credentials info - Login PW) ex) \u0026lsquo;credentials_pw\u0026rsquo; Required    [ Request Example ]\ncurl --request POST \\ --user {user_id}:{access_key} \\ -F 'app_file=@/path/of/your/app_file' \\ -F 'data={\\ \u0026quot;pid\u0026quot;: 509, \\ \u0026quot;testset_name\u0026quot;: \u0026quot;Testset Name Example #1\u0026quot;, \\ \u0026quot;time_limit\u0026quot;: 5, \\ \u0026quot;use_vo\u0026quot;: false, \\ \u0026quot;credentials\u0026quot;: { \\ \u0026quot;login_id\u0026quot;: \u0026quot;credentials_id\u0026quot;, \\ \u0026quot;login_pw\u0026quot;: \u0026quot;credentials_pw\u0026quot; \\ } \\ }' https://api.apptest.ai/openapi/v2/testset [ Response ]\n   key  type  Description Required     pid  Positive Number - Project ID  ex) 509 Required   testset_name  String Max 100 Characters Name of testset  ex) \u0026ldquo;Testset name Example#1\u0026rdquo; Required   time_limmit  Positive Number Min : 5 Max : 30 Test time limit (Minutes) ex) 5 If the value is empty, it follows the time-limit saved in the project settings. Required   use_vo  Boolean Default: false Whether AT\u0026amp;T Video Optimizer(ARO) is used (true or false ) ex) true Required   callback  String Max 250 Characters Callback URL to be called after test completion. ex) \u0026lsquo;https://127.0.0.1/callback/url/example\u0026rsquo; Required   credentials login_id String Max 150 Characters ID of the test account required to test the app. (Test credentials info - Login ID) ex) \u0026lsquo;credentials_id\u0026rsquo; Required    login_pw String Max 150 Characters Password of the test account required to test the app. (Test credentials info - Login PW) ex) \u0026lsquo;credentials_pw\u0026rsquo; Required    [ Response Example ]\n{ \u0026quot;data\u0026quot;: { \u0026quot;test_count\u0026quot;: 1, \u0026quot;testset_id\u0026quot;: 251929 }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ Error Code ]\n   result_code result_msg reason     4000 Missing Request Parameter The required parameter was not found in the request parameters : {{ PARAMETER KEY }}   4030 App File Analysis Failed iOS plistlib Parsing Error : {{ PARSING ERROR MSG }}   4031  Test creation failed : There was a problem pre-processing your app file. \\n The IPA file must be a development version that is signed by your development certificate.   4032  Test creation failed. Invalid app file. \\n There was a problem pre-processing your app file.   4040  Android Manifest Parsing Error : {{ PARSING ERROR MSG }}   4041  No launchable activity found. (android.intent.category.LAUNCHER)   4050 Invalid Request Parameter File extension not supported. ( Support : ipa, zip, app, apk, xapk, apks )   4051  The required parameter was not found in the request parameters : (app_file)   4052  Invalid request parameter : (project_id: {{ PROJECT_ID }})   4053  Invalid request parameter : (testset_id: {{ TESTSET_ID }})   4055  Device is not compatible with this app : ( APP os type : {{ APP_OS_TYPE }} )   4080 Invalid Request Parameter Device info does not exist in prese project data.   4081  Available devices does not exist in preset project data.   5001 Run New Testset Error Global Exception Error - {{ ERROR_MSG }}   6001 App File Upload Error App file upload fail.   8000 System Maintenance The service is currently under system maintenance.    2. [ GET ] Testset Status Check the progress of the testset\n[ Request ]\nGET /openapi/v2/testset/{testset_id} Host : https://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request URL Parameter\n   Key Type Description Required     testset_id Positive number Testset ID Required    [ Request Example ]\ncurl --request POST \\ --user {user_id}:{access_key} \\ https://api.apptest.ai/openapi/v2/testset/55716 [ Response ]\nResponse Body Data Type : JSON\n   Key  Type Description     testset_status  String Testset Status ( Complete or Running )   testset_status_detail  JSON Count of the result for each tests.    total_test_cnt Positive number Total test counts    error_cnt Positive number Error detected test counts    fail_cnt Positive number Failed test counts    initializing_cnt Positive number Initializing test counts    pass_cnt Positive number passed test counts    running_cnt Positive number Running test counts    stop_cnt Positive number stopped test counts    response_time Datetime Response time (timezome : UTC)    [Response Example ]\n{ \u0026quot;data\u0026quot;: { 'testset_status': 'Complete', 'testset_status_detail': { 'total_test_cnt': 3, 'error_cnt': 1, 'fail_cnt': 1, 'initializing_cnt': 0, 'running_cnt': 1, 'stop_cnt': 0, 'pass_cnt': 0 } }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ Error Code ]\nresult_code\tresult_msg\treason 5002\tGet Testset Status Error\tGlobal Exception Error – {ERROR_MSG} 8000\tSystem Maintenance\tThe Service is currently under system maintenance. HTTP STATUS CODE 400\tBad Request 401\tUnauthorized 200\tOK\n3. [ GET ] Testset Result This API that can be called only when the test is completed. Returns the result data of the testset.\n[ Request ]\nGET /openapi/v2/testset/{testset_id}/result Host : https://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request URL Parameter\nKey\tType\tDescription\tRequired testset_id\tPositive number\tTestset ID\tRequired\n[ Request Example ]\ncurl --request POST \\ --user {user_id}:{access_key} \\ https://api.apptest.ai/openapi/v2/testset/55716/result [ Response ]\nResponse Body Data Type : JSON\n   Key Type Description     complete Boolean Whether the test is running or completed ( true or false)   result_xml Boolean Result data in XML format in JUnit format   result_html Boolean Result data in HTML format   result_json Boolean Result data in JSON format in JUnit format    [ Response Example ]\n{ \u0026quot;data\u0026quot;: { \u0026quot;complete\u0026quot;: true, \u0026quot;result_html\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result_xml\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result_json\u0026quot;: \u0026quot;\u0026quot;, }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ JUnit XML Format ]\n   Key\tType\tDescription       complete Boolean Whether the test is running or completed (true   result_xml String Result data in XML format in JUnit format   result_html String Result data in HTML format   result_json String Result data in JSON format in JUnit format    [ JUnit XML Format Example ]\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;{PROJECT NAME}.TestBot\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;{DEVICE NAME}\u0026quot; time=\u0026quot;{TEST TIME SECONDS}\u0026quot;\u0026gt; \u0026lt;system-out\u0026gt;{RESULT PAGE LINK URL}\u0026lt;/system-out\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;{DEVICE NAME}\u0026quot; time=\u0026quot;{TEST TIME SECONDS}\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;{RESULT PAGE LINK URL}\u0026quot; /\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt; [ Error Code ]\n   result_code result_msg reason     5003 Get Testset Result Data Error Global Exception Error – {ERROR_MSG}   6002 Get Testset Result Data Failed Test is running yet. Please request when the test is complete.   6003 Data Does Not Exist Test data does not exist.   8000 System Maintenance The Service is currently under system maintenance.       HTTP STATUS CODE     400 Bad Request   401 Unauthorized   200 OK    Appendix. API Result Codes    result_code result_msg reason     4000 Missing Request Parameter The required parameter was not found in the request parameters : ({PARAMETER KEY})   4030 App File Analysis Failed iOS plistlib Parsing Error : {PARSING ERROR MSG}   4031 App File Analysis Failed Test creation failed : There was a problem pre-processing your app file. \\n the IPA file must be a development version that is signed by your development certificate.   4032 App File Analysis Failed Test creation failed : Invalid app file. \\n There was a problem pre-processing your app file.   4040 App File Analysis Failed Android Manifest Parsing Error : {PARSING ERROR MSG}   4041 App File Analysis Failed No launchable activity found. (android.intent.category.LAUNCHER)   4050 Invalid Request Parameter File extension not supported. (support : ipa, zip, app, apk, xapk, apks)   4051 Invalid Request Parameter The required parameter was not found in the request parameters: (app_file)   4052 Invalid Request Parameter Invalid request parameter : (project_id : {PROJECT_ID})   4053 Invalid Request Parameter Invalid request parameter : (testset_id : {TESTSET_ID})   4055 Invalid Request Parameter Device is not compatible with this app : (App os type : {APP_OS_TYPE})   4080 Invalid Request Parameter Device info does not exist in preset project data.   4081 Invalid Request Parameter Available devices does not exist in preset project data.   5001 Run New Testset Error Global Exception Error – {ERROR_MSG}   5002 Get Testset Status Error Global Exception Error – {ERROR_MSG}   5003 Get Testset Result Data Error Global Exception Error – {ERROR_MSG}   6001 App File Upload Error App file upload fail.   6002 Get Testset Result Data Failed Test is running yet. Please request when the test is complete.   6003 Data Does Not Exist Test data does not exist.   8000 System Maintenance The Service is currently under system maintenance.    ","excerpt":"Integrating REST APIs into CI / CD pipelines This is API information provided to use apptest.ai in …","ref":"/apptest_client_docs/ko/docs/restapi/","title":"Rest APIs for CI/CD"},{"body":" This is a placeholder page that shows you how to use this template site.\n This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you\u0026rsquo;d like to copy its docs section.\nOther content such as marketing material, case studies, and community updates should live in the About and Community pages.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\n","excerpt":"This is a placeholder page that shows you how to use this template site.\n This section is where the …","ref":"/apptest_client_docs/","title":"Documentation"},{"body":" This is a placeholder page that shows you how to use this template site.\n This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you\u0026rsquo;d like to copy its docs section.\nOther content such as marketing material, case studies, and community updates should live in the About and Community pages.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\n","excerpt":"This is a placeholder page that shows you how to use this template site.\n This section is where the …","ref":"/apptest_client_docs/ko/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"/apptest_client_docs/index.json","title":""},{"body":"","excerpt":"","ref":"/apptest_client_docs/search/","title":"Search Results"},{"body":"","excerpt":"","ref":"/apptest_client_docs/ko/search/","title":"Søkeresultat"},{"body":" Dette er TechOS! Dokumentasjon   Last ned   TechOS kan nå lastes ned i AppStore!\n\n\u0026lt;/div\u0026gt;         ","excerpt":" Dette er TechOS! Dokumentasjon   Last ned   TechOS kan nå lastes ned i AppStore!\n\n\u0026lt;/div\u0026gt; …","ref":"/apptest_client_docs/ko/","title":"TechOS"}]