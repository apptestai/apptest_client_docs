[{"body":"apptest.ai Integration for Jenkins Automating Android and iOS app testing with a jenkins pipeline This document explains how to configure Jenkins and use our APIs to automatically run apptest.ai tests from the build phase.\nPlease refer to the link Jenkins Setup Guide for Jenkins installations\n1. Apptest.ai – Integration API POST  https://api.apptest.ai/tests_set/queuing?access_key={ACCESS_KEY}\nJSON Data parameters\n   Name Type Required / Optional Description     callback String Optional A callback URL, triggered when testing is complete   pid Integer Required The existing project ID in apptest.ai   test_set_name String Required A test name to be created in the apptest.ai project   login_id String Optional The ID of the account to enter When Testbot encounter Sign in screen.   login_pw String Optional The password of the account to enter when Testbot encounter Sign in screen,   use_vo Integer (0 or 1) Optional An option to enable / disable the AT\u0026amp;T Video Optimizer (ARO) for testing    File Parameters\n   Name Type Required / Optional Description     apk_file File Required App binary file for the app to the tested    Example Response\n{ \u0026quot;data\u0026quot;: { \u0026quot;test_count\u0026quot;: 1, // Test Count (Integer), \u0026quot;tsid\u0026quot;: 192948 // Test Set ID (Integer) }, \u0026quot;errorCode\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;ok\u0026quot; } Callback result data format\nThe testing result in the JUnit XML Format is returned using the callback URL\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;TestBot Test.Apk File Name (with Version)\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 1\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 2\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;apptest.ai Result Page Link\u0026quot;\u0026gt;\u0026lt;/error\u0026gt; \u0026lt;/testcase\u0026gt; ... \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt; GET  https://api.apptest.ai/tests_set/{tsid}/ci_info?access_key=ACCESS_KEY\nResponse { \u0026quot;complete\u0026quot;: true, \u0026quot;data\u0026quot;: { \u0026quot;result_xml\u0026quot;: \u0026quot;\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;TestBot Test.Apk File Name (with Version)\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 1\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 2\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;Apptes.ai Result Page Link\u0026quot;\u0026gt;\u0026lt;/error\u0026gt; \u0026lt;/testcase\u0026gt; ... \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt;\u0026quot; }, \u0026quot;errorCode\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;ok\u0026quot; } 2. apptest.ai – Access Key and Project ID To integrate apptest.ai into a Jenkins pipline, an access key and a project ID are required.\n  How to find the access key: An access key is automatically issued when you sign up with apptest.ai. You can locate it in the apptest.ai profile page       How to find the project ID: A project ID is assigned when you create a testing project     By default, a Sample Test Project Page is created automatically once you sign in.\nChanging the settings in the Sample Test Project is not supported. However, you can change the settings for your new projects.\n  3. Jenkins – Webhook Step Plugin Installation Search and install the “Webhook step” Plugin in the Jenkins dashboard: [Manage Jenkins] -\u0026gt; [Manage Plugins] -\u0026gt; [Available]\nSkip this step if you are using the apptest.ai Test Stage Code2 source code that uses polling instead of webhook in the next stage.\n4. Jenkins – Pipeline configuration This section demonstraters how to connect an apptest.ai Test stage to a Jenkins pipeline item. A Jenkins pipeline item is must be already created.\nPlease refer to the Example Link for more detail.\n  Go to the setup page and click on the Configure page.       On the pipeline definition page, add the apptest.ai Test Stage Code to the Script box   [apptest.ai Test Stage Code 1] – Webhook import groovy.json.JsonSlurper node { def gitRepository def androidHome def apkFile def accessKey def serviceProjectId def asyncResult def serviceUrl def serviceHost def serviceCompleteCheckUrl // Add to your Preparation Stage stage('Preparation') { // Git Repository URL Address gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git' // Android Home Path androidHome = '/opt/apps/android-sdk' echo \u0026quot;Current workspace : ${workspace}\u0026quot; accessKey = 'e40c4487b3cf5e6d53ef0543d2614488' serviceProjectId = 376 serviceHost = \u0026quot;https://api.apptest.ai\u0026quot; serviceUrl = \u0026quot;${serviceHost}/test_set/queuing?access_key=${accessKey}\u0026quot; } // Git Source Clone Stage stage('Clone source') { git branch: 'master', url: gitRepository } // Android SDK directory path Setting stage('SDK Configure') { sh \u0026quot;echo 'sdk.dir=${androidHome}' \u0026gt; local.properties\u0026quot; } // Gradle AssembleDebug Build Stage stage('Gradle Debug build') { sh \u0026quot;./gradlew :app:assembleDebug\u0026quot; } // apptest.ai Test Stage stage('Apptestai Test') { apkFile=\u0026quot;path/to/file/your_app.apk\u0026quot; hook = registerWebhook() // Call apptest.ai's Test API. // Refer to 1. API Spec r = sh(returnStdout: true, script: \u0026quot;curl -X POST -F 'apk_file=@\\\u0026quot;${apkFile}\\\u0026quot;' -F 'data={\\\u0026quot;pid\\\u0026quot;: ${serviceProjectId}, \\\u0026quot;test_set_name\\\u0026quot;: \\\u0026quot;${env.BUILD_TAG}\\\u0026quot;, \\\u0026quot;callback\\\u0026quot;: \\\u0026quot;${hook.getURL()}\\\u0026quot;}' ${serviceUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) echo \u0026quot;jsonParse Result: ${j}\u0026quot; if (j.errorCode != 0) { echo \u0026quot;apptest.ai Test cannot started. ${r}\u0026quot; r = null j = null error \u0026quot;FAIL\u0026quot; } tsid=j['data']['tsid'] echo \u0026quot;apptest.ai TestSet id : ${tsid}\u0026quot; echo \u0026quot;Waiting for POST to ${hook.getURL()}\u0026quot; // Wait for Test Complete signal waitForWebhook hook // Get the Test Result Data // Refer to 1. API Spec serviceCompleteCheckUrl = \u0026quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}\u0026quot; r = sh( returnStdout: true, script: \u0026quot;curl -X GET ${serviceCompleteCheckUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) asyncResult = j.data.result_xml echo \u0026quot;Webhook called with data: ${asyncResult}\u0026quot; } stage('Write Apptestai Test Result') { sh \u0026quot;mkdir -p tmp/\u0026quot; // Write File file:\u0026quot;tmp/TESTS-Apptestai.xml\u0026quot;, text: asyncResult, encoding: \u0026quot;UTF-8\u0026quot; sh \u0026quot;echo -n '${asyncResult}' \u0026gt; tmp/TESTS-Apptestai.xml\u0026quot; } stage('jUnit Test') { junit 'tmp/TESTS-*.xml' } } [apptest.ai Test Stage Code 2] – Polling import groovy.json.JsonSlurper node { def gitRepository def androidHome def apkFile def accessKey def serviceProjectId def testResult def serviceUrl def serviceHost def serviceCompleteCheckUrl // Add to your Preparation Stage stage('Preparation') { // Git Repository URL Address gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git' // Android Home Path androidHome = '/opt/apps/android-sdk' echo \u0026quot;Current workspace : ${workspace}\u0026quot; accessKey = 'e40c4487b3cf5e6d53ef0543d2614488' serviceProjectId = 376 serviceHost = \u0026quot;https://api.apptest.ai\u0026quot; serviceUrl = \u0026quot;${serviceHost}/test_set/queuing?access_key=${accessKey}\u0026quot; } // Git Source Clone Stage stage('Clone source') { git branch: 'master', url: gitRepository } // Android SDK directory path Setting stage('SDK Configure') { sh \u0026quot;echo 'sdk.dir=${androidHome}' \u0026gt; local.properties\u0026quot; } // Gradle AssembleDebug Build Stage stage('Gradle Debug build') { sh \u0026quot;./gradlew :app:assembleDebug\u0026quot; } // Apptest.ai Test Stage stage('apptestai Test') { apkFile=\u0026quot;path/to/file/your_app.apk\u0026quot; // Call apptest.ai\\'s Test API. r = sh(returnStdout: true, script: \u0026quot;curl -X POST -F 'apk_file=@\\\u0026quot;${apkFile}\\\u0026quot;' -F 'data={\\\u0026quot;pid\\\u0026quot;: ${serviceProjectId}, \\\u0026quot;test_set_name\\\u0026quot;: \\\u0026quot;${env.BUILD_TAG}\\\u0026quot;}' ${serviceUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) echo \u0026quot;jsonParse Result: ${j}\u0026quot; if (j.errorCode != 0) { echo \u0026quot;apptest.ai Test cannot started. ${r}\u0026quot; r = null j = null error \u0026quot;FAIL\u0026quot; } tsid=j['data']['tsid'] echo \u0026quot;Apptest.ai TestSet id : ${tsid}\u0026quot; // Get the Test Result Data // Refer to 1. API Spec serviceCompleteCheckUrl=\u0026quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}\u0026quot; r = null j = null waitUntil { sleep (time: 10, unit: \u0026quot;SECONDS\u0026quot;) r = sh( returnStdout: true, script: \u0026quot;curl -X GET ${serviceCompleteCheckUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) complete=j.complete echo \u0026quot;ci_info result : ${complete}\u0026quot; if (complete == true) { testResult=j.data.result_xml r = null j = null return true } r = null j = null return false } echo \u0026quot;test complete with data: ${testResult}\u0026quot; } stage('Write Apptestai Test Result') { sh \u0026quot;mkdir -p tmp/\u0026quot; // Write File file:\u0026quot;tmp/TESTS-Apptestai.xml\u0026quot;, text: testResult, encoding: \u0026quot;UTF-8\u0026quot; sh \u0026quot;echo -n '${testResult}' \u0026gt; tmp/TESTS-Apptestai.xml\u0026quot; } stage('jUnit Test') { junit 'tmp/TESTS-*.xml' } } You can change the following items in the above script.\n accessKey: The access key from apptest.ai serviceProjectId: The project ID created in apptest.ai  Testing is performed with preset devices within a time limit defined in the apptest.ai project configuration. Changing the settings for the Sample Test Project is not allowed, but you can change the settings in a new project.   apkFile: The app path (App Binary File) to be tested  Click “Build Now” in Jenkins to start the pipeline.     5. Test Results Once the testing is complete, the testing results in the JUnit XML result format are automatically passed onto Jenkins with a callback URL.\nJenkins reflects the returned testing results. For more detailed analysis, please visit apptest.ai\n  View Testing Results in Jenkins               View Testing Results in apptest.ai           ","excerpt":"apptest.ai Integration for Jenkins Automating Android and iOS app testing with a jenkins pipeline …","ref":"/integrations/1_jenkins/","title":"1. Jenkins"},{"body":"Jenkins 사용자를 위한 apptest.ai 통합 가이드 Jenkins 파이프라인으로 Android 및 iOS 앱 테스트 자동화하기 이 문서는 Jenkins를 구성하고 API를 사용하여 빌드 단계에서 apptest.ai 테스트를 자동으로 실행할 수 있도록 통합시키는 방법을 설명합니다.\nJenkins 설치에 대해서는 Jenkins Setup Guide 링크를 참조하시기 바랍니다.\n1. Apptest.ai – Integration API POST  https://api.apptest.ai/tests_set/queuing?access_key={ACCESS_KEY}\nJSON Data parameters\n   Name Type Required / Optional Description     callback String Optional 테스트가 완료되면 호출될 Callback URL   pid Integer Required apptest.ai에서 생성한 프로젝트의 고유번호   test_set_name String Required apptest.ai의 프로젝트에 생성될 테스트 세트의 이름   login_id String Optional Testbot이 로그인 화면을 만났을때 입력할 앱의 로그인 아이디   login_pw String Optional Testbot이 로그인 화면을 만났을때 입력할 앱의 로그인 비밀번호   use_vo Integer (0 or 1) Optional AT\u0026amp;T사의 Video Optimizer (ARO)를 활성화 / 비활성화하는 옵션    File Parameters\n   Name Type Required / Optional Description     apk_file File Required 테스트 대상이 될 앱파일    Example Response\n{ \u0026quot;data\u0026quot;: { \u0026quot;test_count\u0026quot;: 1, // Test Count (Integer), \u0026quot;tsid\u0026quot;: 192948 // Test Set ID (Integer) }, \u0026quot;errorCode\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;ok\u0026quot; } Callback result data format\nCallback URL을 통해 리턴되는 JUnit XML 형식의 테스트 결과\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;TestBot Test.Apk File Name (with Version)\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 1\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 2\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;apptest.ai Result Page Link\u0026quot;\u0026gt;\u0026lt;/error\u0026gt; \u0026lt;/testcase\u0026gt; ... \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt; GET  https://api.apptest.ai/tests_set/{tsid}/ci_info?access_key=ACCESS_KEY\nResponse { \u0026quot;complete\u0026quot;: true, \u0026quot;data\u0026quot;: { \u0026quot;result_xml\u0026quot;: \u0026quot;\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;TestBot Test.Apk File Name (with Version)\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 1\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;Device Name 2\u0026quot; time=\u0026quot;Test Duration (sec)\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;Apptes.ai Result Page Link\u0026quot;\u0026gt;\u0026lt;/error\u0026gt; \u0026lt;/testcase\u0026gt; ... \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt;\u0026quot; }, \u0026quot;errorCode\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;ok\u0026quot; } 2. apptest.ai – Access Key and Project ID apptest.ai를 Jenkins 파이프 라인에 통합하려면 액세스 키와 프로젝트의 고유번호(Project ID)가 필요합니다.\n  액세스 키를 찾는 방법 : apptest.ai에 가입하면 액세스 키가 자동으로 발급됩니다. apptest.ai Profile 페이지에서 확인하실 수 있습니다.       프로젝트 ID를 찾는 방법 : 테스트 프로젝트를 만들 때 프로젝트 ID가 할당됩니다.     회원가입시 기본적으로 샘플 테스트 프로젝트가 1개 생성됩니다.\n샘플 테스트 프로젝트의 설정 변경은 지원되지 않습니다. 그러나 새로 생성한 프로젝트는 설정을 변경할 수 있습니다.\n  3. Jenkins – Webhook Step Plugin Installation Jenkins 대시 보드에서 \u0026ldquo;Webhook step\u0026rdquo; 플러그인을 검색하여 설치하십시오. [Jenkins 관리]-\u0026gt; [플러그인 관리]-\u0026gt; [사용 가능]\n다음 단계에서 webhook 대신 폴링을 사용하는 apptest.ai Test Stage Code2 소스 코드를 사용하는 경우이 단계를 건너 뛰십시오.\n4. Jenkins – Pipeline configuration 이 섹션에서는 apptest.ai Test 스테이지를 Jenkins 파이프 라인 항목에 연결하는 방법을 보여줍니다. Jenkins 파이프 라인 항목이 이미 작성되어 있어야합니다.\n자세한 내용은 예제 링크를 참조하십시오.\n  메인 페이지에서 좌측메뉴의 Configure 버튼을 클릭하십시오.       파이프 라인 설정 페이지에서 apptest.ai Tes Stage Code를 스크립트 입력란에 추가하십시오.   [apptest.ai Test Stage Code 1] – Webhook import groovy.json.JsonSlurper node { def gitRepository def androidHome def apkFile def accessKey def serviceProjectId def asyncResult def serviceUrl def serviceHost def serviceCompleteCheckUrl // Add to your Preparation Stage stage('Preparation') { // Git Repository URL Address gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git' // Android Home Path androidHome = '/opt/apps/android-sdk' echo \u0026quot;Current workspace : ${workspace}\u0026quot; accessKey = 'e40c4487b3cf5e6d53ef0543d2614488' serviceProjectId = 376 serviceHost = \u0026quot;https://api.apptest.ai\u0026quot; serviceUrl = \u0026quot;${serviceHost}/test_set/queuing?access_key=${accessKey}\u0026quot; } // Git Source Clone Stage stage('Clone source') { git branch: 'master', url: gitRepository } // Android SDK directory path Setting stage('SDK Configure') { sh \u0026quot;echo 'sdk.dir=${androidHome}' \u0026gt; local.properties\u0026quot; } // Gradle AssembleDebug Build Stage stage('Gradle Debug build') { sh \u0026quot;./gradlew :app:assembleDebug\u0026quot; } // apptest.ai Test Stage stage('Apptestai Test') { apkFile=\u0026quot;path/to/file/your_app.apk\u0026quot; hook = registerWebhook() // Call apptest.ai's Test API. // Refer to 1. API Spec r = sh(returnStdout: true, script: \u0026quot;curl -X POST -F 'apk_file=@\\\u0026quot;${apkFile}\\\u0026quot;' -F 'data={\\\u0026quot;pid\\\u0026quot;: ${serviceProjectId}, \\\u0026quot;test_set_name\\\u0026quot;: \\\u0026quot;${env.BUILD_TAG}\\\u0026quot;, \\\u0026quot;callback\\\u0026quot;: \\\u0026quot;${hook.getURL()}\\\u0026quot;}' ${serviceUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) echo \u0026quot;jsonParse Result: ${j}\u0026quot; if (j.errorCode != 0) { echo \u0026quot;apptest.ai Test cannot started. ${r}\u0026quot; r = null j = null error \u0026quot;FAIL\u0026quot; } tsid=j['data']['tsid'] echo \u0026quot;apptest.ai TestSet id : ${tsid}\u0026quot; echo \u0026quot;Waiting for POST to ${hook.getURL()}\u0026quot; // Wait for Test Complete signal waitForWebhook hook // Get the Test Result Data // Refer to 1. API Spec serviceCompleteCheckUrl = \u0026quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}\u0026quot; r = sh( returnStdout: true, script: \u0026quot;curl -X GET ${serviceCompleteCheckUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) asyncResult = j.data.result_xml echo \u0026quot;Webhook called with data: ${asyncResult}\u0026quot; } stage('Write Apptestai Test Result') { sh \u0026quot;mkdir -p tmp/\u0026quot; // Write File file:\u0026quot;tmp/TESTS-Apptestai.xml\u0026quot;, text: asyncResult, encoding: \u0026quot;UTF-8\u0026quot; sh \u0026quot;echo -n '${asyncResult}' \u0026gt; tmp/TESTS-Apptestai.xml\u0026quot; } stage('jUnit Test') { junit 'tmp/TESTS-*.xml' } } [apptest.ai Test Stage Code 2] – Polling import groovy.json.JsonSlurper node { def gitRepository def androidHome def apkFile def accessKey def serviceProjectId def testResult def serviceUrl def serviceHost def serviceCompleteCheckUrl // Add to your Preparation Stage stage('Preparation') { // Git Repository URL Address gitRepository = 'https://github.com/forcemax/apps-android-wikipedia.git' // Android Home Path androidHome = '/opt/apps/android-sdk' echo \u0026quot;Current workspace : ${workspace}\u0026quot; accessKey = 'e40c4487b3cf5e6d53ef0543d2614488' serviceProjectId = 376 serviceHost = \u0026quot;https://api.apptest.ai\u0026quot; serviceUrl = \u0026quot;${serviceHost}/test_set/queuing?access_key=${accessKey}\u0026quot; } // Git Source Clone Stage stage('Clone source') { git branch: 'master', url: gitRepository } // Android SDK directory path Setting stage('SDK Configure') { sh \u0026quot;echo 'sdk.dir=${androidHome}' \u0026gt; local.properties\u0026quot; } // Gradle AssembleDebug Build Stage stage('Gradle Debug build') { sh \u0026quot;./gradlew :app:assembleDebug\u0026quot; } // Apptest.ai Test Stage stage('apptestai Test') { apkFile=\u0026quot;path/to/file/your_app.apk\u0026quot; // Call apptest.ai\\'s Test API. r = sh(returnStdout: true, script: \u0026quot;curl -X POST -F 'apk_file=@\\\u0026quot;${apkFile}\\\u0026quot;' -F 'data={\\\u0026quot;pid\\\u0026quot;: ${serviceProjectId}, \\\u0026quot;test_set_name\\\u0026quot;: \\\u0026quot;${env.BUILD_TAG}\\\u0026quot;}' ${serviceUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) echo \u0026quot;jsonParse Result: ${j}\u0026quot; if (j.errorCode != 0) { echo \u0026quot;apptest.ai Test cannot started. ${r}\u0026quot; r = null j = null error \u0026quot;FAIL\u0026quot; } tsid=j['data']['tsid'] echo \u0026quot;Apptest.ai TestSet id : ${tsid}\u0026quot; // Get the Test Result Data // Refer to 1. API Spec serviceCompleteCheckUrl=\u0026quot;${serviceHost}/test_set/${tsid}/ci_info?access_key=${accessKey}\u0026quot; r = null j = null waitUntil { sleep (time: 10, unit: \u0026quot;SECONDS\u0026quot;) r = sh( returnStdout: true, script: \u0026quot;curl -X GET ${serviceCompleteCheckUrl}\u0026quot;).toString().trim() j = new JsonSlurper().parseText(r) complete=j.complete echo \u0026quot;ci_info result : ${complete}\u0026quot; if (complete == true) { testResult=j.data.result_xml r = null j = null return true } r = null j = null return false } echo \u0026quot;test complete with data: ${testResult}\u0026quot; } stage('Write Apptestai Test Result') { sh \u0026quot;mkdir -p tmp/\u0026quot; // Write File file:\u0026quot;tmp/TESTS-Apptestai.xml\u0026quot;, text: testResult, encoding: \u0026quot;UTF-8\u0026quot; sh \u0026quot;echo -n '${testResult}' \u0026gt; tmp/TESTS-Apptestai.xml\u0026quot; } stage('jUnit Test') { junit 'tmp/TESTS-*.xml' } } 위 스크립트에서 다음 항목들을 수정하십시오.\n accessKey: apptest.ai의 액세스 키 serviceProjectId: apptest.ai에 생성된 프로젝트의 고유번호 (Project ID)  apptest.ai 프로젝트 설정에 저장된 Time Limit과 디바이스 정보를 적용하여 테스트를 수행합니다. 샘플 테스트 프로젝트의 설정 변경은 허용되지 않지만 새 프로젝트의 설정은 변경할 수 있습니다.   apkFile: 테스트 할 대상 앱파일(App Binary File)  파이프 라인을 시작하려면 Jenkins에서 \u0026ldquo;Build Now\u0026quot;를 클릭하십시오.     5. Test Results 테스트가 완료되면 JUnit XML 결과 형식의 테스트 결과가 Callback URL을 통해 Jenkins에 자동으로 전달됩니다. Jenkins는 반환 된 테스트 결과를 반영합니다.\n자세한 테스트결과 분석 정보는 [apptest.ai] (https://apptest.ai)를 방문해 확인하실 수 있습니다.\n  Jenkins에서 테스트 결과보기               apptest.ai 에서 테스트 결과보기           ","excerpt":"Jenkins 사용자를 위한 apptest.ai 통합 가이드 Jenkins 파이프라인으로 Android 및 iOS 앱 테스트 자동화하기 이 문서는 Jenkins를 구성하고 API …","ref":"/ko/integrations/1_jenkins/","title":"1. Jenkins"},{"body":"apptest.ai Integration for Travis CI With just a few lines of script, you can enable apptest.ai along with Travis CI for out testbot to explore your apps and report results for every build process.\nTo use the apptest.ai service within Travis CI pipeline, you can take the following two steps: 1. Register the apptest.ai Access Key, and 2. add the apptest.ai to your build script (travis.yml)\nAdding apptest.ai access key onto the build environment   Copy the access key string from the apptest.ai service profile page     Add apptest.ai access key to the build envirronment variable named APPTEST_AI_ACCESS_KEY and add the encryprion to the build script\n$ travis login $ travis encrypt APPTEST_AI_ACCESS_KEY=\u0026quot;ID:Acess Key\u0026quot; --add  The format for the access key becomes “apptest.ai ID: apptest.ai Access Key“. For example, if the ID is jean@apptest.ai and the access key is “ab8f3e321d631c84c9b1113”, the following applies:\n jean@apptest.ai:ab8f3e321d631c84c9b1113 After this command, the following “env:” section is added to the existing build script file. This section is replaced by the APPTEST_AI_ACCESS_KEY environment variable declaration at run time.\nenv: global: - secure: fUnmuuqKmxWjxGHbfTB7QZgSmkB7yvt6KGAn8dCs1j4GneWbSIrEhghRrlOMQCThhMoetou4H+NaWeTXRRa4fpoCGm1U51RbD+J4DrbKWj3MzRupzByEAsaWhmvCaYVgCOlkYgaApcvujIrpw1rUTQVio8+WoYIXgXx3B   Now, add a script that executes the following after cloning the CI Tool integration script set by apptest.ai as follows.\n- git clone https://github.com/apptestai/ci_addon - export binary_path=HackerNews.ipa - export project_id='825' - bash ./ci_addon/step.sh  At least two arguments, binary_path and project_id, are required to invoke the service. binary_path is the path to the binary you want to test, i.e. * .apk files for android and * .ipa files for iOS. project_id is the Project ID for apptest.ai that contains the settings such as test time and device list for testing. The Project ID of apptest.ai can be found on the project information page as shown below.\n   If you don’t want to download apptest.ai’s CI integration script every time, include apptest.ai’s ci_addon repository in the Project Repository in advance.\n  Once you commit the build script, Travis CI will execute. When running apptest.ai script, the test is executed as shown below and the result is printed on the console.     The test results are stored in test-results/apptest-ai_result.html with detailed HTML report and an XML document in JUnit Test result format in test-results/apptestai/result.xml. You can save this file externally using various deploy functions provided by Travis CI. Below is an example of a release on Github. You can see the apptest.ai test report posted on Github’s release page.    If you want to change the location of the folder to store results, declare and pass test_result_path environment variable. If you want to execute the next build without waiting for the test to finish, declare waiting_for_test_results environment variable and pass FALSE.\n Finally, here’s the .travis.yml example. First, for Android, in the “env” section, you can see that there are two secure environment variables for storing apptest.ai access key and two secure environment variables for Github acess key to deploy.\n For an iOS case, iOS needs two more registered environment variables. This is an environment variable for code sign which is required when creating binary on iOS. Below we used a Fastlane match for the code sign. Fastlane match encrypts the certificate file and provisioning file required for code signing on Github, so two more access tokens and decryption keys are added to access a private GitHub repository where the certificate is stored compared to Android.\n   ","excerpt":"apptest.ai Integration for Travis CI With just a few lines of script, you can enable apptest.ai …","ref":"/integrations/2_travisci/","title":"2. Travis CI"},{"body":"apptest.ai Integration for Travis CI 몇 줄의 스크립트만으로 apptest.ai를 Travis CI와 함께 사용하여 testbot에서 앱을 탐색하고 모든 빌드 프로세스에 대한 결과를보고 할 수 있습니다.\nTravis CI 파이프 라인 내에서 apptest.ai 서비스를 사용하려면 다음 두 단계를 수행하십시오. 1. apptest.ai의 액세스 키를 등록하고 2. apptest.ai를 빌드 스크립트 (travis.yml)에 추가하십시오.\nAdding apptest.ai access key onto the build environment   apptest.ai 서비스의 Profile 페이지에서 액세스 키 문자열을 복사하십시오.     APPTEST_AI_ACCESS_KEY라는 빌드 환경 변수에 apptest.ai 액세스 키를 추가하고 빌드 스크립트에 암호화를 추가하십시오.\n$ travis login $ travis encrypt APPTEST_AI_ACCESS_KEY=\u0026quot;ID:Acess Key\u0026quot; --add  액세스 키의 형식은 \u0026ldquo;apptest.ai ID : apptest.ai 액세스 키\u0026quot;가됩니다. 예를 들어, ID가 jean@apptest.ai이고 액세스 키가 \u0026ldquo;ab8f3e321d631c84c9b1113\u0026quot;인 경우 다음이 적용됩니다.\n jean@apptest.ai:ab8f3e321d631c84c9b1113 이 명령 후에 다음“env :”섹션이 기존 빌드 스크립트 파일에 추가됩니다. 이 섹션은 런타임시 APPTEST_AI_ACCESS_KEY 환경 변수 선언으로 대체됩니다.\nenv: global: - secure: fUnmuuqKmxWjxGHbfTB7QZgSmkB7yvt6KGAn8dCs1j4GneWbSIrEhghRrlOMQCThhMoetou4H+NaWeTXRRa4fpoCGm1U51RbD+J4DrbKWj3MzRupzByEAsaWhmvCaYVgCOlkYgaApcvujIrpw1rUTQVio8+WoYIXgXx3B   이제 apptest.ai에서 설정한 CI 도구 통합 스크립트를 다음과 같이 복제 한 후 다음을 실행하는 스크립트를 추가하십시오.\n- git clone https://github.com/apptestai/ci_addon - export binary_path=HackerNews.ipa - export project_id='825' - bash ./ci_addon/step.sh  서비스를 호출하려면 최소한 2 개의 arguments, binary_path 및 project_id가 필요합니다. binary_path는 테스트하려는 바이너리 파일의 경로입니다 (예 : Android 용 * .apk 파일 및 iOS 용 * .ipa 파일). project_id는 테스트 시간 및 테스트를 위한 장치 목록과 같은 설정을 포함하는 apptest.ai의 프로젝트 고유번호(Project ID)입니다. apptest.ai의 프로젝트 ID는 아래와 같이 프로젝트 정보 페이지에서 찾을 수 있습니다.\n   apptest.ai의 CI 통합 스크립트를 매번 다운로드하지 않으려면 프로젝트 저장소에 apptest.ai의 ci_addon 저장소를 미리 포함하십시오.\n  빌드 스크립트를 커밋하면 Travis CI가 실행됩니다. apptest.ai 스크립트를 실행할 때 아래와 같이 테스트가 실행되고 결과가 콘솔에 인쇄됩니다.     테스트 결과는 자세한 HTML 형식의 보고서는 test-results/apptest-ai_result.html에 JUnit 테스트 결과 형식의 XML 문서는 test-results/apptestai/result.xml에 저장됩니다. Travis CI에서 제공하는 다양한 배포 기능을 사용하여이 파일을 외부에 저장할 수 있습니다. 아래는 Github의 릴리즈 예입니다. apptest.ai 테스트 보고서는 Github의 릴리스 페이지에 게시되어 있습니다.    결과를 저장할 폴더의 위치를 변경하려면 test_result_path 환경 변수를 선언하고 전달하십시오. 테스트가 완료되기를 기다리지 않고 다음 빌드를 실행하려면 waiting_for_test_results 환경 변수를 선언하고 FALSE를 전달하십시오.\n 마지막으로 .travis.yml 예제가 있습니다. 먼저 Android의 \u0026ldquo;env\u0026quot;섹션에서 apptest.ai 액세스 키를 저장하기 위한 두 가지 보안 환경 변수와 Github acess 키를 배포하기 위한 두 가지 보안 환경 변수가 있음을 알 수 있습니다.  iOS의 경우 iOS에는 등록 된 환경 변수가 두 개 더 필요합니다. 이것은 iOS에서 바이너리를 생성 할 때 필요한 Code sign을 위한 환경 변수입니다. 아래에서는 Code Sign에 Fastlane 매칭을 사용했습니다. Fastlane match는 Github에서 코드 서명에 필요한 인증서 파일과 프로비저닝 파일을 암호화하므로 인증서가 저장된 개인 GitHub 리포지토리에 액세스하기 위해 두 개의 액세스 토큰과 암호 해독 키가 추가됩니다.\n   ","excerpt":"apptest.ai Integration for Travis CI 몇 줄의 스크립트만으로 apptest.ai를 Travis CI와 함께 사용하여 testbot에서 앱을 탐색하고 모 …","ref":"/ko/integrations/2_travisci/","title":"2. Travis CI"},{"body":"apptest.ai Integration for Circle CI Starting with CircleCI version 2.1, the build script sharing method called orb allows you to have Testbot test your app and report the results in every build with just a few lines of scripts.\nTo enable the apptest.ai service during a build in CircleCI: 1. Register the apptest.ai access key in the build environment variable.\nAdding apptest.ai access key onto the build environment   Copy the access key string from the apptest.ai service profile page     Connect to CircleCI and click the Setting icon to the right of the build project name to go to the build configuration page.     From the Setup page, select Environment variables menu and click Add Variables button to create the variable APPTEST_AI_ACCESS_KEY.   Enter the value of the variable as “apptest.ai ID: apptest.ai Access Key”. For example, if the ID is jean@apptest.ai and the access key is “ab8f3e321d631c84c9b1113”. Register one as follows.\njean@apptest.ai:ab8f3e321d631c84c9b1113 The following is the normal registration and access_key is masked and printed.\n  Adding apptest.ai test step to the build   Include apptest.ai Orb\nIf the app you want to test is in Android, include android-app-test orb as shown below.\norbs: apptest-ai: apptestai/android-app-test@volatile To test your iOS App, include ios-app-test orb as shown below.\norbs: apptest-ai: apptestai/ios-app-test@volatile   Adding apptest.ai test build step\nYou can add apptest-ai test steps anywhere in your build workflow.\n- apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818'  At least two arguments, binary_path and project_id, are required to invoke the service. binary_path is the path to the binary you want to test: * .apk files for android and * .ipa files for iOS. project_id is the ID for apptest.ai that contains the settings such as test time and device list for testing. The Project ID of apptest.ai can be found on the Project Information page as shown below.      Execute the build\nThe apptest-ai/run-test step sends a request to test with apptest.ai and after the test is complete, prints the test result to the console as shown below.    If you want to move on to the next build step without waiting for the apptest.ai test result, you can set FALSE to the waiting_for_test_results argument as shown below.\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818' waiting_for_test_results: 'false'   (Optional) Storing test result\napptest.ai test result printed in the console is saved under “test-results” directory by default. To include the test results in the Test Summary provided by CircleCI, add the store-test-results step provided by CircleCI and specify the test result path of apptest.ai as shown below.\n- store_test_results: path: test-results If you add the store-test result step, CircleCI analyzes the test result of apptest.ai along with other test results in the Test Summary tab as below.     (Optional) Storing test result\nBecause Test Summary only provides very limited pass/fail information, apptest.ai provides a more detailed test result report in a separate HTML format. To save this report in the Artifact section of CircleCI, add the store_artifacts step provided by CircleCI as below and specify the path where test results of apptest.ai are saved.\n- store_artifacts: path: test-results Saved test report is inquired as below in Artifacts tab in CircleCI.   If you click this html file, you can see the detailed report as below.    If you want to change the directory that stores the test results, you can pass the path to the test_result_path argument when you run the apptest.ai test step as below.\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818' test_result_path: app/build/outputs/apk/debug Finally, here’s the sample the final .circleci / config.yml file. Below is for Android.\n And iOS:\n   ","excerpt":"apptest.ai Integration for Circle CI Starting with CircleCI version 2.1, the build script sharing …","ref":"/integrations/3_circleci/","title":"3. Circle CI"},{"body":"apptest.ai Integration for Circle CI CircleCI 버전 2.1부터 orb라는 빌드 스크립트 공유 방법을 사용하게 됨으로써 단 몇 줄의 스크립트만으로 매 빌드마다 Testbot이 앱을 테스트한 결과를 보고받을 수 있습니다.\nCircleCI에서 빌드하는 동안 apptest.ai 서비스를 활성화하려면 : 1. 빌드 환경 변수에 apptest.ai 액세스 키를 등록합니다.\nAdding apptest.ai access key onto the build environment   apptest.ai 서비스의 Profile 페이지에서 액세스 키 문자열을 복사하십시오.     CircleCI에 연결하고 빌드 프로젝트 이름 오른쪽의 설정 아이콘을 클릭하여 빌드 구성 페이지로 이동하십시오.     설정 페이지에서 환경 변수 메뉴를 선택하고 변수 추가 단추를 클릭하여 APPTEST_AI_ACCESS_KEY 변수를 작성하십시오.   변수 값을 \u0026ldquo;apptest.ai ID : apptest.ai 액세스 키\u0026quot;로 입력하십시오. 예를 들어 ID가 jean@apptest.ai이고 액세스 키가 \u0026ldquo;ab8f3e321d631c84c9b1113\u0026quot;인 경우입니다. 다음과 같이 등록하십시오.\n jean@apptest.ai:ab8f3e321d631c84c9b1113 다음은 일반적인 등록이며 access_key는 마스크 처리되고 출력됩니다.\n  Adding apptest.ai test step to the build   Include apptest.ai Orb\n테스트하려는 앱이 Android 인 경우 아래와 같이 android-app-test orb를 포함하십시오.\norbs: apptest-ai: apptestai/android-app-test@volatile iOS 앱을 테스트하려면 아래 표시된대로 ios-app-test orb를 포함하십시오.\norbs: apptest-ai: apptestai/ios-app-test@volatile   Adding apptest.ai test build step\n빌드 워크 플로우의 어느 곳에나 apptest-ai 테스트 단계를 추가 할 수 있습니다.\n- apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818'  서비스를 호출하려면 최소한 2 개의 arguments, binary_path 및 project_id가 필요합니다. binary_path는 테스트하려는 바이너리의 경로입니다. * Android의 경우 .apk 파일 및 iOS의 경우 * .ipa 파일입니다. project_id는 테스트 시간 및 테스트 할 장치 목록과 같은 설정이 포함 된 apptest.ai의 프로젝트 고유번호 (Project ID)입니다. apptest.ai의 프로젝트 ID는 아래와 같이 프로젝트 정보 페이지에서 찾을 수 있습니다.      Execute the build\napptest-ai/run-test 단계는 apptest.ai로 테스트 요청을 보내고 테스트가 완료된 후 테스트 결과를 아래 그림과 같이 콘솔에 인쇄합니다.    apptest.ai 테스트 결과를 기다리지 않고 다음 빌드 단계로 넘어가려면 아래와 같이 waiting_for_test_results 인수를 FALSE로 설정하면 됩니다.\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818' waiting_for_test_results: 'false'   (Optional) Storing test result\n콘솔에 출력 된 apptest.ai 테스트 결과는 기본적으로“test-results”디렉토리에 저장됩니다. CircleCI에서 제공 한 테스트 요약에 테스트 결과를 포함 시키려면 CircleCI에서 제공 한 store-test-results 단계를 추가하고 아래와 같이 apptest.ai의 테스트 결과 경로를 지정하십시오.\n- store_test_results: path: test-results Store-test 결과 단계를 추가하면 CircleCI는 아래와 같이 Test Summary 탭에 apptest.ai 테스트 결과와 다른 테스트 결과를 분석합니다.     (Optional) Storing test result\n테스트 요약은 매우 제한된 통과 / 실패 정보 만 제공하며 apptest.ai는 보다 자세한 테스트 결과 보고서를 별도의 HTML 형식으로 제공합니다. 이 보고서를 CircleCI의 아티팩트 섹션에 저장하려면 다음과 같이 CircleCI에서 제공 한 store_artifacts 단계를 추가하고 apptest.ai의 테스트 결과가 저장되는 경로를 지정하십시오.\n- store_artifacts: path: test-results 저장된 테스트 보고서는 CircleCI의 아티팩트 탭에서 아래와 같이 조회됩니다.   이 html 파일을 클릭하면 아래와 같은 상세 보고서를 볼 수 있으며,이 html 파일을 클릭하면 아래와 같은 상세 보고서를 볼 수 있습니다.    테스트 결과를 저장하는 디렉토리를 변경하려면 apptest.ai 테스트 단계를 다음과 같이 실행할 때 test_result_path 인수에 경로를 전달할 수 있습니다.\n - apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk project_id: '818' test_result_path: app/build/outputs/apk/debug 마지막으로 최종 .circleci / config.yml 파일 샘플이 있습니다. 아래는 안드로이드 용입니다.\n iOS:\n   ","excerpt":"apptest.ai Integration for Circle CI CircleCI 버전 2.1부터 orb …","ref":"/ko/integrations/3_circleci/","title":"3. Circle CI"},{"body":"Using apptest.ai with Circle CI on SauceLabs We have a tutorial on how to use the apptest.ai service on CircleCI to perform a daily build which is running a smoke test without writing a single line of code. This time, I will introduce how to test the same using a device provided by Sauce Labs, not a device provided by apptest.ai.\nThe only change from the way the CircleCI used the appTest.ai service is to use Sauce Labs API Keys instead of apptest.ai’s access keys, and to associate the apptest.ai and Sauce Labs accounts. If you are interested in linking your apptest.ai and Sauce Labs accounts during the current Beta period, please send an email to contact@apptest.ai\n  Access to Sauce Labs service as below and obtain your API key     Register the APPTEST_AI_ACCESS_KEY in CircleCI using Sauce Labs API the same way that your previously registered the apptest.ai access key in CircleCI     Add Sauce Labs-based apptest.ai Test Step orb to CircleCI’s build configuration file (circleci/config,yml). The same is true except that orb has been renamed from apptestai/android-app-test to apptestai/android-app-test-saucelabs. In other words, include orb as below:\n  orbs: apptest-ai: apptestai/android-app-test-saucelabs@dev:0.1.9 Add apptest.ai test step to start testing as below\n- apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk  When you build, you can test with the device registered in your Sauce Labs account as below, and the result is saved in the Artifacts tab in CircleCI. More detailed test data including device log can be accessed by accessing Sauce Labs.   Test on LG G5 provided by Sauce Labs has been successfully completed   The test summary of CircleCI also demonstrates the result the testbot   You can find the test report saved in HTML from in CircleCI Artifacts.   You can open this HTML to see the detailed test results   Connect to Sauce Labs to see the details of the LG G5 report used in the test   Sauce Labs can view the screen shots collected during the tests requested by CircleCI   In Sauce Labs, you can search the detailed device log collected during the test on the CircleCI\nFinally, the full build script used by CircleCI shown in this demo is shown below.    ","excerpt":"Using apptest.ai with Circle CI on SauceLabs We have a tutorial on how to use the apptest.ai service …","ref":"/integrations/4_circleciwithsaucelabs/","title":"4. Circle CI with Saucelabs"},{"body":"SauceLabs에서 Circle CI와 apptest.ai 모두 사용하기 CircleCI에서 apptest.ai 서비스를 사용하여 스크립트를 작성없이 스모크 테스트(Smoke Test)를 Daily 빌드마다 수행하는 방법에 대한 튜토리얼이 있습니다. 이번에는 apptest.ai에서 제공하는 장치가 아니라 Sauce Labs에서 제공하는 장치를 사용하여 동일하게 테스트하는 방법을 소개합니다.\nCircleCI가 appTest.ai 서비스를 사용하는 방식과 다른 점은 apptest.ai의 액세스 키 대신 Sauce Labs API 키를 사용하고 apptest.ai 및 Sauce Labs 계정을 연결하는 것입니다. 현재 베타서비스로 운영중이며, apptest.ai 및 Sauce Labs 계정을 연결하려면 [contact@apptest.ai] (mailto : contact@apptest.ai)로 연락주시기 바랍니다.\n  아래와 같이 Sauce Labs 서비스에 액세스하여 API 키를 얻습니다.     이전에 CircleCI에 apptest.ai 액세스 키를 등록한 것과 같은 방법으로 Sauce Labs API를 사용하여 CircleCI에서 APPTEST_AI_ACCESS_KEY를 등록하십시오     Sauce Labs 기반 apptest.ai 테스트 단계 orb를 CircleCI의 빌드 구성 파일 (circleci / config, yml)에 추가합니다. orb의 이름이 apptestai/android-app-test에서 apptestai/android-app-test-saucelabs로 바뀌 었다는 점을 제외하면 마찬가지입니다. 즉, 아래와 같이 orb를 입력해 줍니다.\n  orbs: apptest-ai: apptestai/android-app-test-saucelabs@dev:0.1.9 apptest.ai 테스트 단계를 추가하여 다음과 같이 테스트를 시작하십시오.\n- apptest-ai/run-test: binary_path: app/build/outputs/apk/debug/app-debug.apk  빌드시 아래와 같이 Sauce Labs 계정에 등록 된 장치로 테스트 할 수 있으며, 결과는 CircleCI의 아티팩트 탭에 저장됩니다. Sauce Labs에 액세스하면 장치 로그를 포함한 자세한 테스트 데이터에 액세스 할 수 있습니다.   Sauce Labs에서 제공 한 LG G5 장치에서의 테스트가 성공적으로 완료되었습니다   CircleCI의 테스트 Summary는 테스트 봇의 결과도 보여줍니다.   CircleCI 아티팩트에서 HTML로 저장된 테스트 보고서를 확인하실 수 있습니다.   이 HTML을 열어 자세한 테스트 결과를 볼 수 있습니다.   테스트에 사용 된 LG G5 보고서의 세부 사항을 보려면 Sauce Labs에 접속하시면 됩니다.   SauceLabs에서는 CircleCI가 요청한 테스트 중에 수집 된 스크린 샷을 볼 수 있습니다.   SauceLabs에서는 CircleCI에서 테스트 중에 수집 된 자세한 장치 로그를 검색 할 수도 있습니다.\n마지막으로, 이 데모에 표시된 CircleCI에서 사용하는 전체 빌드 스크립트가 아래에 나와 있습니다.    ","excerpt":"SauceLabs에서 Circle CI와 apptest.ai 모두 사용하기 CircleCI에서 apptest.ai 서비스를 사용하여 스크립트를 작성없이 스모크 테스트(Smoke …","ref":"/ko/integrations/4_circleciwithsaucelabs/","title":"4. Circle CI with Saucelabs"},{"body":"","excerpt":"","ref":"/integrations/","title":"CI/CD Integration Document"},{"body":"","excerpt":"","ref":"/ko/integrations/","title":"CI/CD Integration Document"},{"body":"Integrating REST APIs into CI / CD pipelines CI (Continuous Integration) 도구과 연동하여 apptest.ai를 사용하기위한 API 정보를 제공합니다. 해당 문서에서 제공되는 테스트시작, 테스트 상태 보기, 테스트 결과 조회 API를 통해 apptest.ai를 사용하실 수 있습니다.\n1. [POST] Run New Testset 새로운 테스트 세트를 생성합니다. (테스트 세트는 단위 테스트들의 집합니다.) 새로운 테스트기 실행될때 사용되는 일부 옵션들은 프로젝트에 미리 저장해놓은 설정 정보를 따릅니다.\n[Request]\nPOST /openapi/v2/testset Host : HTTPS://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request Body Miltipary Form Data #1\n   key type Description Required     app_file File 테스트할 대상 앱 파일 Required    Request Body Miltipary Form Data #2\n   key  type  Description Required     pid  Positive Number - 프로젝트의 고유번호  ex) 509 Required   testset_name  String Max 100 Characters 테스트 세트의 이름  ex) \u0026ldquo;Testset name Example#1\u0026rdquo; Required   time_limmit  Positive Number Min : 5 Max : 30 테스트 제한 시간 (Minutes) ex) 5 값이 비어 있으면 프로젝트 설정에 저장된 시간 제한값을 따릅니다. Required   use_vo  Boolean Default: false AT\u0026amp;T Video Optimizer(ARO) 사용 여부 (true or false ) ex) true Required   callback  String Max 250 Characters 테스트가 완료될 경우 호출될 Callback URL ex) \u0026lsquo;https://127.0.0.1/callback/url/example\u0026rsquo; Required   credentials login_id String Max 150 Characters 앱을 테스트하는데 사용될 테스트 대상앱의 계정정보(아이디) (Test credentials info - Login ID) ex) \u0026lsquo;credentials_id\u0026rsquo; Required    login_pw String Max 150 Characters 앱을 테스트하는데 사용될 테스트 대상앱의 계정정보(비밀번호) (Test credentials info - Login PW) ex) \u0026lsquo;credentials_pw\u0026rsquo; Required    [ Request Example ]\ncurl --request POST \\ --user {user_id}:{access_key} \\ -F 'app_file=@/path/of/your/app_file' \\ -F 'data={\\ \u0026quot;pid\u0026quot;: 509, \\ \u0026quot;testset_name\u0026quot;: \u0026quot;Testset Name Example #1\u0026quot;, \\ \u0026quot;time_limit\u0026quot;: 5, \\ \u0026quot;use_vo\u0026quot;: false, \\ \u0026quot;credentials\u0026quot;: { \\ \u0026quot;login_id\u0026quot;: \u0026quot;credentials_id\u0026quot;, \\ \u0026quot;login_pw\u0026quot;: \u0026quot;credentials_pw\u0026quot; \\ } \\ }' https://api.apptest.ai/openapi/v2/testset [ Response ]\n   key  type Description     test_count  Positive Number 테스트 세트에 실행된 단일 테스트의 갯수  ex) 3   testset_id  Positive Number 테스트 세트의 고유번호  ex) 251929    [ Response Example ]\n{ \u0026quot;data\u0026quot;: { \u0026quot;test_count\u0026quot;: 1, \u0026quot;testset_id\u0026quot;: 251929 }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ Error Code ]\n   result_code result_msg reason     4000 Missing Request Parameter The required parameter was not found in the request parameters : {{ PARAMETER KEY }}   4030 App File Analysis Failed iOS plistlib Parsing Error : {{ PARSING ERROR MSG }}   4031  Test creation failed : There was a problem pre-processing your app file. \\n The IPA file must be a development version that is signed by your development certificate.   4032  Test creation failed. Invalid app file. \\n There was a problem pre-processing your app file.   4040  Android Manifest Parsing Error : {{ PARSING ERROR MSG }}   4041  No launchable activity found. (android.intent.category.LAUNCHER)   4050 Invalid Request Parameter File extension not supported. ( Support : ipa, zip, app, apk, xapk, apks )   4051  The required parameter was not found in the request parameters : (app_file)   4052  Invalid request parameter : (project_id: {{ PROJECT_ID }})   4053  Invalid request parameter : (testset_id: {{ TESTSET_ID }})   4055  Device is not compatible with this app : ( APP os type : {{ APP_OS_TYPE }} )   4080 Invalid Request Parameter Device info does not exist in prese project data.   4081  Available devices does not exist in preset project data.   5001 Run New Testset Error Global Exception Error - {{ ERROR_MSG }}   6001 App File Upload Error App file upload fail.   8000 System Maintenance The service is currently under system maintenance.    2. [ GET ] Testset Status 테스트 세트의 진행상황 확인\n[ Request ]\nGET /openapi/v2/testset/{testset_id} Host : https://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request URL Parameter\n   Key Type Description Required     testset_id Positive number 테스트 세트의 고유 번호 Required    [ Request Example ]\ncurl --request GET \\ --user {user_id}:{access_key} \\ https://api.apptest.ai/openapi/v2/testset/55716 [ Response ]\nResponse Body Data Type : JSON\n   Key  Type Description     testset_status  String 테스트 세트의 진행 상태 ( Complete or Running )   testset_status_detail  JSON 테스트의 상태별 갯수    total_test_cnt Positive number 전체 단일 테스트 갯수    error_cnt Positive number 에러가 발생된 단일 테스트의 갯수 (Error)    fail_cnt Positive number 실패한 단일 테스트의 갯수 (Fail)    initializing_cnt Positive number 준비단계의 단일 테스트 갯수 (Initializing)    pass_cnt Positive number 정상종료된 단일 테스트의 갯수 (Pass)    running_cnt Positive number 테스트가 진행중인 단일테스트의 갯수 (Running)    stop_cnt Positive number 사용자에 의해 중지된 단일 테스트의 갯수 (stopped)   response_time  Datetime 응답 시간 (timezome : UTC)    [Response Example ]\n{ \u0026quot;data\u0026quot;: { 'testset_status': 'Complete', 'testset_status_detail': { 'total_test_cnt': 3, 'error_cnt': 1, 'fail_cnt': 1, 'initializing_cnt': 0, 'running_cnt': 1, 'stop_cnt': 0, 'pass_cnt': 0 }, 'response_time': 'Mon, 25 May 2020 06:40:24 GMT' }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ Error Code ]\n   result_code result_msg reason     5002 Get Testset Status Error Global Exception Error – {ERROR_MSG}   8000 System Maintenance The Service is currently under system maintenance.    3. [ GET ] Testset Result 테스트가 완료되었을 경우에만 호출이 가능한 API 입니다. 테스트 세트의 결과 데이터를 조회합니다.\n[ Request ]\nGET /openapi/v2/testset/{testset_id}/result Host : https://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request URL Parameter\n   Key Type Description Required     testset_id Positive number 테스트 세트의 고유번호 Required    [ Request Example ]\ncurl --request GET \\ --user {user_id}:{access_key} \\ https://api.apptest.ai/openapi/v2/testset/55716/result [ Response ]\nResponse Body Data Type : JSON\n   Key Type Description     complete Boolean 테스트가 진행중인지 종료되었는지에 대한 여부 ( true or false)   result_xml Boolean JUnit형식의 XML 결과 데이터   result_html Boolean HTML형식의 결과 데이터   result_json Boolean JUnit 형식의 Json 결과 데이터    [ Response Example ]\n{ \u0026quot;data\u0026quot;: { \u0026quot;complete\u0026quot;: true, \u0026quot;result_html\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result_xml\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result_json\u0026quot;: \u0026quot;\u0026quot;, }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ JUnit XML Format ]\n   Key Type Description     complete Boolean Whether the test is running or completed (true   result_xml String Result data in XML format in JUnit format   result_html String Result data in HTML format   result_json String Result data in JSON format in JUnit format    [ JUnit XML Format Example ]\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;{PROJECT NAME}.TestBot\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;{DEVICE NAME}\u0026quot; time=\u0026quot;{TEST TIME SECONDS}\u0026quot;\u0026gt; \u0026lt;system-out\u0026gt;{RESULT PAGE LINK URL}\u0026lt;/system-out\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;{DEVICE NAME}\u0026quot; time=\u0026quot;{TEST TIME SECONDS}\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;{RESULT PAGE LINK URL}\u0026quot; /\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt; [ Error Code ]\n   result_code result_msg reason     5003 Get Testset Result Data Error Global Exception Error – {ERROR_MSG}   6002 Get Testset Result Data Failed Test is running yet. Please request when the test is complete.   6003 Data Does Not Exist Test data does not exist.   8000 System Maintenance The Service is currently under system maintenance.    Appendix. API Result Codes    result_code result_msg reason     4000 Missing Request Parameter The required parameter was not found in the request parameters : ({PARAMETER KEY})   4030 App File Analysis Failed iOS plistlib Parsing Error : {PARSING ERROR MSG}   4031 App File Analysis Failed Test creation failed : There was a problem pre-processing your app file. \\n the IPA file must be a development version that is signed by your development certificate.   4032 App File Analysis Failed Test creation failed : Invalid app file. \\n There was a problem pre-processing your app file.   4040 App File Analysis Failed Android Manifest Parsing Error : {PARSING ERROR MSG}   4041 App File Analysis Failed No launchable activity found. (android.intent.category.LAUNCHER)   4050 Invalid Request Parameter File extension not supported. (support : ipa, zip, app, apk, xapk, apks)   4051 Invalid Request Parameter The required parameter was not found in the request parameters: (app_file)   4052 Invalid Request Parameter Invalid request parameter : (project_id : {PROJECT_ID})   4053 Invalid Request Parameter Invalid request parameter : (testset_id : {TESTSET_ID})   4055 Invalid Request Parameter Device is not compatible with this app : (App os type : {APP_OS_TYPE})   4080 Invalid Request Parameter Device info does not exist in preset project data.   4081 Invalid Request Parameter Available devices does not exist in preset project data.   5001 Run New Testset Error Global Exception Error – {ERROR_MSG}   5002 Get Testset Status Error Global Exception Error – {ERROR_MSG}   5003 Get Testset Result Data Error Global Exception Error – {ERROR_MSG}   6001 App File Upload Error App file upload fail.   6002 Get Testset Result Data Failed Test is running yet. Please request when the test is complete.   6003 Data Does Not Exist Test data does not exist.   8000 System Maintenance The Service is currently under system maintenance.    ","excerpt":"Integrating REST APIs into CI / CD pipelines CI (Continuous Integration) 도구과 연동하여 apptest.ai …","ref":"/ko/restapi/","title":"Rest APIs for CI/CD"},{"body":"Integrating REST APIs into CI / CD pipelines This is API information provided to use apptest.ai in connection with CI(Continuous Integration) tools. You can use apptest.ai through test set creation, test status view, and test result view API.\n1. [POST] Run New Testset Run a New Testset. (Testset is group of unit Tests) Some Options of the new test run follow the configuration information stored in the project.\n[Request]\nPOST /openapi/v2/testset Host : https://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request Body Miltipary Form Data #1\n   key type Description Required     app_file File Target APP File to Test Required    Request Body Miltipary Form Data #2\n   key  type  Description Required     pid  Positive Number - Unique number of Project  ex) 509 Required   testset_name  String Max 100 Characters Name of testset  ex) \u0026ldquo;Testset name Example#1\u0026rdquo; Required   time_limmit  Positive Number Min : 5 Max : 30 Test time limit (Minutes) ex) 5 If the value is empty, it follows the time-limit saved in the project settings. Required   use_vo  Boolean Default: false Whether AT\u0026amp;T Video Optimizer(ARO) is used (true or false ) ex) true Required   callback  String Max 250 Characters Callback URL to be called after test completion. ex) \u0026lsquo;https://127.0.0.1/callback/url/example\u0026rsquo; Required   credentials login_id String Max 150 Characters Account information(ID) of the test target app to be used to test the app (Test credentials info - Login ID) ex) \u0026lsquo;credentials_id\u0026rsquo; Required    login_pw String Max 150 Characters Account information(Password) of the test target app to be used to test the app (Test credentials info - Login PW) ex) \u0026lsquo;credentials_pw\u0026rsquo; Required    [ Request Example ]\ncurl --request POST \\ --user {user_id}:{access_key} \\ -F 'app_file=@/path/of/your/app_file' \\ -F 'data={\\ \u0026quot;pid\u0026quot;: 509, \\ \u0026quot;testset_name\u0026quot;: \u0026quot;Testset Name Example #1\u0026quot;, \\ \u0026quot;time_limit\u0026quot;: 5, \\ \u0026quot;use_vo\u0026quot;: false, \\ \u0026quot;credentials\u0026quot;: { \\ \u0026quot;login_id\u0026quot;: \u0026quot;credentials_id\u0026quot;, \\ \u0026quot;login_pw\u0026quot;: \u0026quot;credentials_pw\u0026quot; \\ } \\ }' https://api.apptest.ai/openapi/v2/testset [ Response ]\n   key  type Description     test_count  Positive Number Number of Unit tests run on the Testset  ex) 3   testset_id  Positive Number Unique number of the Testset  ex) 251929    [ Response Example ]\n{ \u0026quot;data\u0026quot;: { \u0026quot;test_count\u0026quot;: 1, \u0026quot;testset_id\u0026quot;: 251929 }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ Error Code ]\n   result_code result_msg reason     4000 Missing Request Parameter The required parameter was not found in the request parameters : {{ PARAMETER KEY }}   4030 App File Analysis Failed iOS plistlib Parsing Error : {{ PARSING ERROR MSG }}   4031  Test creation failed : There was a problem pre-processing your app file. \\n The IPA file must be a development version that is signed by your development certificate.   4032  Test creation failed. Invalid app file. \\n There was a problem pre-processing your app file.   4040  Android Manifest Parsing Error : {{ PARSING ERROR MSG }}   4041  No launchable activity found. (android.intent.category.LAUNCHER)   4050 Invalid Request Parameter File extension not supported. ( Support : ipa, zip, app, apk, xapk, apks )   4051  The required parameter was not found in the request parameters : (app_file)   4052  Invalid request parameter : (project_id: {{ PROJECT_ID }})   4053  Invalid request parameter : (testset_id: {{ TESTSET_ID }})   4055  Device is not compatible with this app : ( APP os type : {{ APP_OS_TYPE }} )   4080 Invalid Request Parameter Device info does not exist in prese project data.   4081  Available devices does not exist in preset project data.   5001 Run New Testset Error Global Exception Error - {{ ERROR_MSG }}   6001 App File Upload Error App file upload fail.   8000 System Maintenance The service is currently under system maintenance.    2. [ GET ] Testset Status Check the progress of the testset\n[ Request ]\nGET /openapi/v2/testset/{testset_id} Host : https://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request URL Parameter\n   Key Type Description Required     testset_id Positive number Unique number of Testset Required    [ Request Example ]\ncurl --request GET \\ --user {user_id}:{access_key} \\ https://api.apptest.ai/openapi/v2/testset/55716 [ Response ]\nResponse Body Data Type : JSON\n   Key  Type Description     testset_status  String Testset Status ( Complete or Running )   testset_status_detail  JSON Count of the result for each tests.    total_test_cnt Positive number Total test counts    error_cnt Positive number Error detected test counts    fail_cnt Positive number Failed test counts    initializing_cnt Positive number Initializing test counts    pass_cnt Positive number passed test counts    running_cnt Positive number Running test counts    stop_cnt Positive number stopped test counts   response_time  Datetime Response time (timezome : UTC)    [Response Example ]\n{ \u0026quot;data\u0026quot;: { 'testset_status': 'Complete', 'testset_status_detail': { 'total_test_cnt': 3, 'error_cnt': 1, 'fail_cnt': 1, 'initializing_cnt': 0, 'running_cnt': 1, 'stop_cnt': 0, 'pass_cnt': 0 }, 'response_time': 'Mon, 25 May 2020 06:40:24 GMT' }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ Error Code ]\n   result_code result_msg reason     5002 Get Testset Status Error Global Exception Error – {ERROR_MSG}   8000 System Maintenance The Service is currently under system maintenance.    3. [ GET ] Testset Result This API that can be called only when the test is completed. Returns the result data of the testset.\n[ Request ]\nGET /openapi/v2/testset/{testset_id}/result Host : https://api.apptest.ai Authorization : Basic {user_id}:{access_key} Request URL Parameter\n   Key Type Description Required     testset_id Positive number Unique number of Testset Required    [ Request Example ]\ncurl --request GET \\ --user {user_id}:{access_key} \\ https://api.apptest.ai/openapi/v2/testset/55716/result [ Response ]\nResponse Body Data Type : JSON\n   Key Type Description     complete Boolean Whether the test is running or completed ( true or false)   result_xml Boolean Result data in XML format in JUnit format   result_html Boolean Result data in HTML format   result_json Boolean Result data in JSON format in JUnit format    [ Response Example ]\n{ \u0026quot;data\u0026quot;: { \u0026quot;complete\u0026quot;: true, \u0026quot;result_html\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result_xml\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result_json\u0026quot;: \u0026quot;\u0026quot;, }, \u0026quot;result_code\u0026quot;: 0, \u0026quot;result_msg\u0026quot;: 0, \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot; } [ JUnit XML Format ]\n   Key Type Description     complete Boolean Whether the test is running or completed (true   result_xml String Result data in XML format in JUnit format   result_html String Result data in HTML format   result_json String Result data in JSON format in JUnit format    [ JUnit XML Format Example ]\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;testsuites name=\u0026quot;TestBot Test\u0026quot;\u0026gt; \u0026lt;testsuite name=\u0026quot;{PROJECT NAME}.TestBot\u0026quot;\u0026gt; \u0026lt;testcase name=\u0026quot;{DEVICE NAME}\u0026quot; time=\u0026quot;{TEST TIME SECONDS}\u0026quot;\u0026gt; \u0026lt;system-out\u0026gt;{RESULT PAGE LINK URL}\u0026lt;/system-out\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;testcase name=\u0026quot;{DEVICE NAME}\u0026quot; time=\u0026quot;{TEST TIME SECONDS}\u0026quot;\u0026gt; \u0026lt;error message=\u0026quot;{RESULT PAGE LINK URL}\u0026quot; /\u0026gt; \u0026lt;/testcase\u0026gt; \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt; [ Error Code ]\n   result_code result_msg reason     5003 Get Testset Result Data Error Global Exception Error – {ERROR_MSG}   6002 Get Testset Result Data Failed Test is running yet. Please request when the test is complete.   6003 Data Does Not Exist Test data does not exist.   8000 System Maintenance The Service is currently under system maintenance.    Appendix. API Result Codes    result_code result_msg reason     4000 Missing Request Parameter The required parameter was not found in the request parameters : ({PARAMETER KEY})   4030 App File Analysis Failed iOS plistlib Parsing Error : {PARSING ERROR MSG}   4031 App File Analysis Failed Test creation failed : There was a problem pre-processing your app file. \\n the IPA file must be a development version that is signed by your development certificate.   4032 App File Analysis Failed Test creation failed : Invalid app file. \\n There was a problem pre-processing your app file.   4040 App File Analysis Failed Android Manifest Parsing Error : {PARSING ERROR MSG}   4041 App File Analysis Failed No launchable activity found. (android.intent.category.LAUNCHER)   4050 Invalid Request Parameter File extension not supported. (support : ipa, zip, app, apk, xapk, apks)   4051 Invalid Request Parameter The required parameter was not found in the request parameters: (app_file)   4052 Invalid Request Parameter Invalid request parameter : (project_id : {PROJECT_ID})   4053 Invalid Request Parameter Invalid request parameter : (testset_id : {TESTSET_ID})   4055 Invalid Request Parameter Device is not compatible with this app : (App os type : {APP_OS_TYPE})   4080 Invalid Request Parameter Device info does not exist in preset project data.   4081 Invalid Request Parameter Available devices does not exist in preset project data.   5001 Run New Testset Error Global Exception Error – {ERROR_MSG}   5002 Get Testset Status Error Global Exception Error – {ERROR_MSG}   5003 Get Testset Result Data Error Global Exception Error – {ERROR_MSG}   6001 App File Upload Error App file upload fail.   6002 Get Testset Result Data Failed Test is running yet. Please request when the test is complete.   6003 Data Does Not Exist Test data does not exist.   8000 System Maintenance The Service is currently under system maintenance.    ","excerpt":"Integrating REST APIs into CI / CD pipelines This is API information provided to use apptest.ai in …","ref":"/restapi/","title":"Rest APIs for CI/CD"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template site.\n -- ","ref":"/","title":"Documentation"},{"body":"This is a placeholder page that shows you how to use this template site.\n This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project. For large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the [Docsy User Guide](https://docsy.dev/docs/), which lives in the [Docsy theme repo](https://github.com/google/docsy/tree/master/userguide) if you'd like to copy its docs section. Other content such as marketing material, case studies, and community updates should live in the [About](/about/) and [Community](/community/) pages. Find out how to use the Docsy theme in the [Docsy User Guide](https://docsy.dev/docs/). You can learn more about how to organize your documentation (and how we organized this site) in [Organizing Your Content](https://docsy.dev/docs/best-practices/organizing-content/). -- ","excerpt":"This is a placeholder page that shows you how to use this template site.\n This section is where the …","ref":"/ko/","title":"Documentation"},{"body":"","excerpt":"","ref":"/index.json","title":""},{"body":"","excerpt":"","ref":"/search/","title":""},{"body":"","excerpt":"","ref":"/ko/index.json","title":""},{"body":"","excerpt":"","ref":"/ko/search/","title":""}]